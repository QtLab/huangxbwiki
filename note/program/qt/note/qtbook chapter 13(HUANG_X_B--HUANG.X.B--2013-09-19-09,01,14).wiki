= Chapter 13 Databases =
* 通过 QSqlDatabase 对象表示一个数据库连接. Qt 使用驱动在不同的数据库 APIs 之间通讯. Qt 的桌面版本包括接下来的驱动:
	- QDB2 --- IBM DB2 版本 7, 以及之后的版本.
	- QIBASE --- Borland InterBase
	- QMYSQL --- MYSQL
	- QOCI --- Oracle (Oracle 的调用接口)
	- QODBC --- ODBC (包括微软的SQL服务器)
	- QPSQL --- PostgreSQL 7.3 以及之后版本
	- QSQLITE --- SQLite 版本3
	- QSQLITE2 --- SQLite 版本2
	- QTDS --- Sybase Adaptive Server
* 由于许可证限制, 不是所有Qt的驱动器都可用于Qt开源版本. 在Qt自身中包含SQL驱动器或者将它们构建为插件.
	- 配置Qt的时候, 我们可以选择在Qt自身内部包含 SQL 驱动或者将驱动构建为插件. Qt 提供了一个 SQLite 数据库, 这是一个 public domain in-process database.
* 当构建 Qt 时就必须允许 SQL 支持. 例如, 可以通过传递 -qt-sql-sqlite 命令行选项给配置脚本或者通过在Qt安装器中设置合适的选项来编译内置的SQLLit支持的Qt.
* QSqlQuery类提供了直接执行SQL语句和处理它们结果的方法. QSqlTableModel 和 QSqlRelationalTableModel 提供了合适的抽象, 可用于避免 SQL 语法的高层数据库接口.

== 13.1 Connecting and Querying ==
* 要执行SQL查询, 首先要建立与数据库的连接, 通常我们在被称之为应用程序启动的单个函数中设置数据库的连接. 代码如下:
{{{c++
    bool createConnection()
    {
        QSqlDatabase db = QSqlDatabase::addDatabase("QMYSQL");
        db.setHostName("mozart.konkordia.edu");
        db.setDatabaseName("musicdb");
        db.setUserName("gbatstone");
        db.setPassword("T17aV44");
        if (!db.open()) {
            QMessageBox::critical(0, QObject::tr("Database Error"),
                                  db.lastError().text());
            return false;
        }
        return true;
    }
}}}
	- 首先, QSqlDatabase::addDatabase() 创建一个QSqlDatabase 对象, 第一个参数表示使用哪个驱动器访问数据库, 这里使用MySQL
	- 接下来, 我们设置数据库host名称, 数据库名称, 用户名称, 密码, 而后调用 open() 函数打开连接.
	- 一旦连接建立起来, 我们可以使用 QSqlQuery 执行任何底下数据库支持的SQL语句.
{{{c++
        QSqlQuery query;
        query.exec("SELECT title, year FROM cd WHERE year >= 1998");
}}}
	- 我们可以通过query的结果集进行浏览
{{{c++
        while (query.next()) {
            QString title = query.value(0).toString();
            int year = query.value(1).toInt();
            std::cerr << qPrintable(title) << ": " << year << std::endl;
        }
}}}
	- QSqlQuery::next()函数可以逐步浏览record set结果, value()函数返回一个域的值, 类型为QVariant.
		- 可以存储在数据库中的不同类型的数据可以映射到对应的C++类型和Qt类型, 且存储于 QVariants 中. 例如 VARCHAR 表示一个字符串, 一个 DATATIME 表示为一个 QDateTime.
	- QSqlQuery() 还提供了其他的方法用于浏览result set: first(), last(), previous(), seek(). 对于某些数据库来说, 这些函数比next()更慢和更费内存.
		- 在调用exec()之前调用QSqlQuery::setForwardOnly(true), 且只用next()浏览结果集, 这样可以优化在大数据集上的操作.
	- 早期我们可以将SQL查询作为参数传递给 QSqlQuery::exec() 函数, 我们也可将SQL语句作为参数传送给QSqlQuery构造函数, 其会立即执行: QSqlQuery query("SELECT title, year FROM cd WHERE year >= 1998");
	- 我们在query上调用isActive()检查错误
{{{c++
        if (!query.isActive())
            QMessageBox::warning(this, tr("Database Error"),
                                 query.lastError().text());
}}}
	- 执行插入操作
{{{c++
        QSqlQuery query("INSERT INTO cd (id, artistid, title, year) "
                        "VALUES (203, 102, 'Living in America', 2002)");
}}}
	- numRowsAffected() 则返回SQL语句影响的行的数目(-1表示错误)
	- 如果我们需要插入大量的record或者我们想要避免将值转换成字符串, 我们可以使用prepare()
		- prepare() 指定一个包含占位符的查询, 而后绑定我们想要插入的值. Qt 支持 Qracle 风格和 ODBC 风格语法的占位符用于所有数据库. 
{{{c++
        QSqlQuery query;
        query.prepare("INSERT INTO cd (id, artistid, title, year) "
                      "VALUES (:id, :artistid, :title, :year)");
        query.bindValue(":id", 203);
        query.bindValue(":artistid", 102);
        query.bindValue(":title", "Living in America");
        query.bindValue(":year", 2002);
        query.exec();
}}}
	- 相同的结果, 使用ODBC风格, 上面使用的是ORACLE风格:
{{{c++
        QSqlQuery query;
        query.prepare("INSERT INTO cd (id, artistid, title, year) "
                      "VALUES (?, ?, ?, ?)");
        query.addBindValue(203);
        query.addBindValue(102);
        query.addBindValue("Living in America");
        query.addBindValue(2002);
        query.exec();
}}}
	- 在调用 exec() 之后, 我们可以调用 bindValue() 或 addBindValue() 绑定新的值, 而后调用 exec() 再次执行有新值的查询.
	- 占位符常用于指定指定二进制数据或包含non-ASCII或non-Latin-1字符的字符串. 在这些场景背后, Qt 使用 Unicode 以及这些支持 Unicode 的数据库和不支持 Unicode 的数据库. Qt 透明地转换字符串为合适的编码.
	- Qt支持 SQL 和数据库 transaction, 对QSqlDatabase对象调用transaction()函数, 而后调用commit()或者rollback()完成这个transaction(业务).
{{{c++
        QSqlDatabase::database().transaction();
        QSqlQuery query;
        query.exec("SELECT id FROM artist WHERE name = 'Gluecifer'");
        if (query.next()) {
            int artistId = query.value(0).toInt();
            query.exec("INSERT INTO cd (id, artistid, title, year) "
                       "VALUES (201, " + QString::number(artistId)
                       + ", 'Riding the Tiger', 1997)");
        }
        QSqlDatabase::database().commit();
}}}
	- QSqlDatabase::database() 函数返回一个 QSqlDatabase 对象表示我们之前在 createConnection() 中创建的连接. 我们可以在该数据库关联的 QSqlDriver 上使用 hasFeature() 测试该数据库是否支持 transactions.
{{{c++
        QSqlDriver *driver = QSqlDatabase::database().driver();
        if (driver->hasFeature(QSqlDriver::Transactions))
            ...
}}}
	- 还可以测试其他的数据库功能, 包括数据库是否支持 BLOBs(binary large objects), Unicode, 和 prepared queries.
	- 调用 QSqlDriver::handle() 和 QSqlResult::handle() 访问数据库底层处理和底层查询结果集处理, 注意这两个函数非常危险, 除非你的确知道你在干什么且非常小心, 可以看他们例子中的文档以及其风险的解释.
	- 如果我们想创建多个连接, 我们可以传递第二个参数一个名称给addDatabase()
{{{c++
        QSqlDatabase db = QSqlDatabase::addDatabase("QPSQL", "OTHER");
        db.setHostName("saturn.mcmanamy.edu");
        db.setDatabaseName("starsdb");
        db.setUserName("hilbert");
        db.setPassword("ixtapa7");
}}}
	- 我们可以将这个名称传递给database()函数得到该QSqlDatabase对象的指针
{{{c++
        QSqlDatabase db = QSqlDatabase::database("OTHER");
}}}
	- 为了使用其他连接进行查询, 我们将该QSqlDatabase对象传递给QSqlQuery构造函数
{{{c++
        QSqlQuery query(db);
        query.exec("SELECT id FROM artist WHERE name = 'Mando Diao'");
}}}
	- 多个连接对于同时执行多个transaction非常有用, 由于一个连接只能处理一个活跃的transaction. 当我们使用多个数据库连接时, 我们还可以有一个未命名的连接, 如果没有指定连接, 则 QSqlQuery 将会使用那个连接.
	- QSqlTableModle类 为一高级接口, 允许我们避免使用 raw SQL 执行大多数常见的 SQL 操作(SELECT, INSERT, UPDATE, DELETE). 这个类也可独立地操作一个数据库而不需要任何GUI. 其也可作为用于 QListView 和 QTableView 的一个数据源.
{{{c++
        QSqlTableModel model;
        model.setTable("cd");
        model.setFilter("year >= 1998");
        model.select();
        // 等同于: SELECT * FROM cd WHERE year >= 1998
}}}
	- 通过QSqlTableModel::record() 返回一个record, 通过 value() 访问指定的域
{{{c++
        for (int i = 0; i < model.rowCount(); ++i) {
            QSqlRecord record = model.record(i);
            QString title = record.value("title").toString();
            int year = record.value("year").toInt();
            std::cerr << qPrintable(title) << ": " << year << std::endl;
        }
}}}
	- 或者, value() 最好使用索引值, QSqlRecord::value() 函数的参数为一个域的名称或者一个域的索引, 当在大数据集上操作时, 其建议通过它们的索引指定域.
{{{c++
        int titleIndex = model.record().indexOf("title");
        int yearIndex = model.record().indexOf("year");
        for (int i = 0; i < model.rowCount(); ++i) {
            QSqlRecord record = model.record(i);
            QString title = record.value(titleIndex).toString();
            int year = record.value(yearIndex).toInt();
            std::cerr << qPrintable(title) << ": " << year << std::endl;
        }
}}}
	- 插入一个record, 我们可以调用insertRows()创建空白行, 而后使用setData()设置每个列(域)的值, 最后使用 submitAll() 提交所有的插入操作.
{{{c++
        QSqlTableModel model;
        model.setTable("cd");
        int row = 0;
        model.insertRows(row, 1);
        model.setData(model.index(row, 0), 113);
        model.setData(model.index(row, 1), "Shanghai My Heart");
        model.setData(model.index(row, 2), 224);
        model.setData(model.index(row, 3), 2003);
        model.submitAll();
}}}
	- 在调用 submitAll() 之后, 该record可能移动至不同的行位置, 这一点依赖于表格如何排序. 
	- 对于用于一个SQL模型的标准模型来说, 我们必须调用submitAll() 将任何的变动写入数据库.
	- 为了更新一个记录, 我们首先定位在该 QSqlTableModle 中我们想要修改的记录上(例如, 使用select()方法), 而后我们提取该记录, 更新我们想要改变的域, 以及将我们的改动写入数据库中.
{{{c++
        QSqlTableModel model;
        model.setTable("cd");
        model.setFilter("id = 125");
        model.select();
        if (model.rowCount() == 1) {
            QSqlRecord record = model.record(0);
            record.setValue("title", "Melody A.M.");
            record.setValue("year", record.value("year").toInt() + 1);
            model.setRecord(0, record);
            model.submitAll();
        }
}}}
	- 我们使用 QSqlTableModel::record() 返回一个 record. 我们使用 QSqlRecord::setValue() 修改该record某域的值. 使用 QSqlTableModel::setRecord() 设置了一个record.
	- 我们也可使用setData()实现更新数据, 和对 non-SQL 模型所做的一样, 我们根据给定行和列返回模型的索引.
{{{c++
		model.select();
		if (model.rowCount() == 1) {
		    model.setData(model.index(0, 1), "Melody A.M.");
		    model.setData(model.index(0, 3),
		                  model.data(model.index(0, 3)).toInt() + 1);
		    model.submitAll();
		}
}}}
	- 删除一个 record, removeRows() 的调用第一个参数为要删除的record中第一个record的行号, 第二个参数为要删除的record的数量.
{{{c++
        model.setTable("cd");
        model.setFilter("id = 125");
        model.select();
        if (model.rowCount() == 1) {
            model.removeRows(0, 1);
            model.submitAll();
        }
}}}
	- 或删除所有的记录集:
{{{c++
        model.setTable("cd");
        model.setFilter("year < 1990");
        model.select();
        if (model.rowCount() > 0) {
            model.removeRows(0, model.rowCount());
            model.submitAll();
        }
}}}
* 如果项目要使用 SQL 类, 我们需要在 .pro 文件中加上下面一行.
{{{
		QT += sql
}}} 
    
== 13.2 Viewing Tables ==
* 前一个章节演示 QSqlQuery与QSqlTableModel互动, 这个章节演示在QTableView演示QSqlTableMode
* 模型设置
{{{c++
        model = new QSqlTableModel(this);
        model->setTable("scooter");
        model->setSort(Scooter_Name, Qt::AscendingOrder);
        model->setHeaderData(Scooter_Name, Qt::Horizontal, tr("Name"));
        model->setHeaderData(Scooter_MaxSpeed, Qt::Horizontal, tr("MPH"));
        model->setHeaderData(Scooter_MaxRange, Qt::Horizontal, tr("Miles"));
        model->setHeaderData(Scooter_Weight, Qt::Horizontal, tr("Lbs"));
        model->setHeaderData(Scooter_Description, Qt::Horizontal,
                                tr("Description"));
        model->select();
}}}
	- 使用了 setHeaderData() 设置了自己的列标题.
	- setSort() 设置排序, 通过select() 放置数据.
{{{c++
        view = new QTableView;
        view->setModel(model);
        view->setSelectionMode(QAbstractItemView::SingleSelection);
        view->setSelectionBehavior(QAbstractItemView::SelectRows);
        view->setColumnHidden(Scooter_Id, true);
        view->resizeColumnsToContents();
        view->setEditTriggers(QAbstractItemView::NoEditTriggers);

        QHeaderView *header = view->horizontalHeader();
        header->setStretchLastSection(true);    
}}}
	- QSqlTableModel 间接地从 QAbstractItemModel 派生. 所以其很容易当作 QTableView 的源.
	- QTableView::setSelectionMode, setSelectionBehavior 可以设置其只能选择单行. QTableView::setColumnHindden() 隐藏某一列. QTableView::resizeColumnsToContents() 使列大小满足其内容. QTableView::setEditTriggers() 设置其触发器. QTableView::horizontalHeader() 得到其 QHeaderView 对象. 
	- QHeaderView::setStretchLastSection()
* 用于显示只读表格的一个选择就是使用 QSqlTableModel 的基类, QSqlQueryModel. 这个类提供了 setQuery() 函数. 所以其可能设置复杂的 SQL 查询以提供一个或多个表格特定的view. 例如, 使用 joins.
	- 不像本章节的例子, 许多的数据库都有很多表和外部关键码关联.
	- Qt提供了QSqlRelationalTableModel, 为QSqlTableModel的派生类. 可以显示和编辑带外部关键码表格.
	- QSqlRelationalTableModel 和 QSqlTableModel非常相似, 除了可以添加 QSqlRelation 给模型. 每个QSqlRelation用于每个外键.
	- 在许多情况下, 一个外键有一个ID域和一个名称域, 通过使用一个 QSqlRelationTableModel, 我们可以确保当场景备用对应的ID域是实际使用的ID时, 用户可以看到和改变名称域. 为了正确的作用这一点, 我们必须在用于显示模型的view上设置一个 QSqlRelationalDelegate(或者我们自己的一个自定义派生类)

== 13.3 Editing Records Using Forms ==
* 本例使用了3个表
{{{c++
    CREATE TABLE location (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(40) NOT NULL);

    CREATE TABLE department (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(40) NOT NULL,
        locationid INTEGER NOT NULL,
        FOREIGN KEY (locationid) REFERENCES location);

    CREATE TABLE employee (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(40) NOT NULL,
        departmentid INTEGER NOT NULL,
        extension INTEGER NOT NULL,
        email VARCHAR(40) NOT NULL,
        startdate DATE NOT NULL,
        FOREIGN KEY (departmentid) REFERENCES department);
}}}
* 本例使用 QSqlRelationalTableModel, 而非 QSqlTableModel, 因为我们要使用 foreign keys.
	- QDateWidgetMapper 该类允许我们映射form的一个widget至对应数据模型的某列.
* QDateEdit::setCalendarPopup() --- 让其可以弹出一个日历. QDateEdit::setDateRange() --- 设置日期范围. QDate::currentDate() --- 得到当前日期. QDate::addDays() --- 添加天数得到新的日期.					  
* QLineEdit::setValidator() --- 设置编辑器的格式. QIntValidator 用于验证文本编辑框, 让其只用整数.
* QDialogButtonBox::addButton() --- 根据role添加按钮, 本例有 QDialogButtonBox::ActionRole, AcceptRole.
* 我们使用一个 QSqlRelationalTableModel, 以及设置一个外键关联. setRelation() 根据外键域的索引和一个QSqlRelation设置关联. QSqlRelation 构造函数的参数有外键所在的表格, 外键域名称, 表示该外键域值的显示域的名称.
* QSqlRelationTableModel::relationModel() 可以得到该关联的表格模型.
* QComboBox::setModelColumn() --- 设置显示模型的哪个列. 
* QSqlTableModel::fieldIndex() --- 根据名称得到模型索引. 
* QDataWidgetMapper 反射一个数据库record的域到其映射的widget上. 并反射这些widget做出的变化至数据库中. 我们可以自己负责提交变化, 也可以告诉mapper让其自动提交变化. 这里我们使用 mapper->setSubmitPolicy() 实现.
* 给该mapper其作用的model, 这里 model 有一个外键, 我们必须给其一个 QSqlRelationDelegate, 该 delegate 确保来自 QSqlRelation 的显示列的值显示给用户, 而不是将 raw IDs 显示给用户. 该 delegate 还确保如果用户开始编辑, 虽然组合框显示了display values, 但是 mapper 实际上将对应的索引值(外键)写至数据库. 
* 如果外键关联的表格有大量的records, 则最好创建我们自己的delegate, 且使用它显示一个有查找能力的"值列表", 而不是依赖于 QSqlRelationalTableModel的默认组合框.
* QDataWidgetMapper::addMapping() 添加映射
* QDataWidgetMapper::setCurrentIndex() 设置当前的record
* QDataWidgetMapper::toFirst() 设置第一个record为当前record
* 如果我们使用手动提交策略, 我们可能需要实现我们自己的slot, 在其内我们提交当前的record而后再浏览以避免遗漏修改.
* 在QDataWidgetMapper::submit()之后会遗失当前行. 所以需要事先使用 QDataWidgetMapper::currentIndex() 获取当前行. 另外虽然提交策略为 QDataWidgetMapper::AutoSubmit, 但只有当用户改变焦点之时才会自动提交.
* QSqlRelationalTableModel::insertRow(), QSqlRelationalTableModel::removeRow() 插入和移除行.
* 当删除一行时, 我们需要手动提交删除. 因为自动提交仅应用于records变化时. 最后注意删除的行是否记录的最后一行.
* QDataWidgetMapper 还可用于任意的数据模型, 包括非SQL模型. 另一种方法是使用 QSqlQuery 直接使用数据填充该form, 并更新数据库. 

== 13.4 Presenting Data in Tabular Forms ==
* Employee的model设置过滤器
* 插入一行时, 如果我们想提供默认值, 我们应当在insertRow() 调用之后立刻调用 setData() 函数实现.
* Model还有 beforeInsert() 信号, 其发生在用户编辑之后, 在数据库插入一行之前.
	- 同样, 还有类似的信号 beforeDelete() 和 beforeUpdate().
* 使用 transaction(业务)保证关联完整性.
* 本例使用了: QSqlDatabase::database().transaction(); QSqlDatabase::database().rollback(); QSqlDatabase::database().commit();
