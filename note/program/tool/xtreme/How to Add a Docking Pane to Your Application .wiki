* Add the following line to your StdAfx.h file
{{{c++
#include <XTToolkitPro.h> // Xtreme Toolkit Pro component library
}}}
* Add CXTPDockingPaneManager member to CMainFrame class: 
{{{c++
// Attributes
public:
    CXTPDockingPaneManager m_paneManager;
}}}
* Add string resources for the titles of the future panes:
{{{c++
IDR_PANE_OPTIONS       61446    Options
IDR_PANE_PROPERTIES    61447    Properties
}}}
* Add following to CMainFrame::OnCreate: 
{{{c++
// Initialize the docking pane manager and set the
// initial them for the docking panes.  Do this only after all
// control bars objects have been created and docked.
m_paneManager.InstallDockingPanes(this);
m_paneManager.SetTheme(xtpPaneThemeOffice);

// Create docking panes.
CXTPDockingPane* pwndPane1 = m_paneManager.CreatePane(
    IDR_PANE_OPTIONS, CRect(0, 0,200, 120), dockLeftOf);
CXTPDockingPane* pwndPane2 = m_paneManager.CreatePane(
    IDR_PANE_PROPERTIES, CRect(0, 0,200, 120), dockBottomOf, pwndPane1)
}}}

* Add a CWnd derived class as member of CMainFrame: 
{{{c++
// Attributes
public:
    CStatic m_wndOptions;
    CEdit m_wndProperties;
}}}
* Add OnDockingPaneNotify handler. 
{{{c++
BEGIN_MESSAGE_MAP(CMainFrame, CMDIFrameWnd)
    //{{AFX_MSG_MAP(CMainFrame)
    ON_WM_CREATE()
    //}}AFX_MSG_MAP
    ON_MESSAGE(XTPWM_DOCKINGPANE_NOTIFY, OnDockingPaneNotify)
END_MESSAGE_MAP()

LRESULT CMainFrame::OnDockingPaneNotify(WPARAM wParam, LPARAM lParam)
{
    if (wParam == XTP_DPN_SHOWWINDOW)
    {
        CXTPDockingPane* pPane = (CXTPDockingPane*)lParam;

        if (!pPane->IsValid())
        {
            switch (pPane->GetID())
            {
            case IDR_PANE_PROPERTIES:
                {
                    if (m_wndProperties.GetSafeHwnd() == 0)
                    {
                        m_wndProperties.Create(WS_CHILD|
                            ES_AUTOVSCROLL|ES_MULTILINE,
                            CRect(0, 0, 0, 0), this, 0);
                    }
                    pPane->Attach(&m_wndProperties);
                    break;
                }
            case IDR_PANE_OPTIONS:
                {
                    if (m_wndOptions.GetSafeHwnd() == 0)
                    {
                        m_wndOptions.Create(_T("\n\nOptions"),
                            WS_CHILD|WS_CLIPCHILDREN|
                            WS_CLIPSIBLINGS|SS_CENTER,
                            CRect(0, 0, 0, 0), this, 0);
                    }
                    pPane->Attach(&m_wndOptions);
                    break;
                }
            }
        }
        return TRUE;
    }
    return FALSE;
}
}}}

* Add Images for Dockig Pane Tabs: 
	* Create Bitmap with icons for created panes 
	* Add to CMainFrame::OnCreate 
{{{c++
int nIDIcons[] = {IDR_PANE_OPTIONS, IDR_PANE_PROPERTIES};
    m_paneManager.SetIcons(IDB_BITMAP_ICONS, nIDIcons,
    _countof(nIDIcons), RGB(0, 255, 0));
}}}

* Add following to the OnCreate function for CMainFrame. This will restore the previous state of docking panes: 
{{{c++
int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
    ...

    // Load the previous state for docking panes.
    CXTPDockingPaneLayout layoutNormal(&m_paneManager);
    if (layoutNormal.Load(_T("NormalLayout")))
    {
        m_paneManager.SetLayout(&layoutNormal);
    }
    return 0;
}
}}}
* Add the OnClose message handler to CMainFrame and the following before the call to the base class. This will save the current state of your docking pane:
{{{c++
void CMainFrame::OnClose()
{
    // Save the current state for docking panes.
    CXTPDockingPaneLayout layoutNormal(&m_paneManager);
    m_paneManager.GetLayout(&layoutNormal);
    layoutNormal.Save(_T("NormalLayout"));
    CMDIFrameWnd::OnClose();
}
}}}
