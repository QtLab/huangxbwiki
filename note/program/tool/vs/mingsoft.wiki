= 实例001 在系统菜单中添加菜单项 =
	* PeculiarMenu
= 实例002 带图标的程序菜单 =
	* IconMenu
	* 此类可以直接使用
	* 创建该类对象, 而后调用调用该类的 LoadMenu 函数加载资源里的菜, 再调用ChangeMenuItem方法修改菜单为自绘制菜单
	* SetTopMenuBackground和SetTopMenuBackground设置自定义选项
	* 本代码注释掉了图像列表, 方便后面直接使用该类, 如果需要可以自己创建
	* CDC::FromHandle(lpDrawItemStruct->hDC); 通过条目的hDC得到DC
= 实例03 根据表中数据动态生成菜单 =
	* DynamicMenu
	* 主要是访问数据库得到数据
	* 使用CMenu::AppendMenu 添加菜单项
	* CMenu::CreateMenu() 创建一个菜单, Detach() 和 DestroyMenu() 则销毁该菜单
	* CWnd::SetMenu() 之后, 可以调用 CMenu::Detach() 和 CMenu::DestroyMenu() 销毁该菜单的资源

= 实例04 浮动的菜单 =
	* FloatMenuDemo
	* DECLARE_DYNAMIC 宏: 当从CObject派生类时, 使用该宏可以在运行时期访问基类信息. 当在头文件包含该宏时, 就必须在源文件中包含宏 IMPLEMENT_DYNAMIC. 使用了该宏后, 可以在使用 RUNTIME_CLASS宏和CObject::IsKindOf函数在运行时期判断你对象属于何类
	* DECLARE_MESSAGE_MAP 宏: 每个CCmdTarget派生类需要定义该宏实现消息映射. 使用 BEGIN_MESSAGE_MAP 宏, 进入消息处理函数, END_MESSAGE_MAP结束消息映射
	* CMenu 临时LoadMenu之后, 如果不使用, 则注意 DestroyMenu 销毁资源
	* CToolBar::GetToolBarCtrl().GetButtonCount() 可以得到工具条按钮数目
	* 在程序中使用自定义工具条, 需要先调用 Create 方法, 而后调用 CToolBarCtrl的SetBitmapSize和SetButtonSize设置大小
	* 由于VS2005与VC6的不同, 未能将该程序实现

= 实例05 在控件上单击右键弹出菜单 =
	* PopMenu
	* CMenu::TrackPopupMenu

= 实例06 个性化的弹出菜单 =
	* CustomPopMenu
	* CBitmap::LoadBitmap --- 加载一个位图, CBitmap::GetBitmap --- 得到位图信息(如高宽), CBitmap::DeleteObject --- 不使用位图之后记得删除
	* CDC::CreateCompatibleDC, CDC::StretchBlt
	* CGdiObject
	* 如何绘制一个位图到DC上, 首先创建一个CDC用于内存加载位图,使用方法CDC::CreateCompatibleDC. 而后该内存CDC调用方法SelectObject加载CBitmap对象, 之后调用要显示位图的CDC的方法StretchBlt
	* CFont::CreateFont --- 创建一个字体, 这里创建了一个垂直的字体

= 实例07 任务栏托盘弹出菜单 =
	* TrayPopMenu
	* NOTIFYICONDATA 结构体用于托盘
	* AfxGetApp()->LoadIcon: 事实上只是调用Windows API 的 LoadIcon 函数
	* 使用 Shell_NotifyIcon 调用托盘消息, 比如添加, 删除托盘等
	* CWnd::OnSysCommand 系统消息的ID有 SC_MINIMIZE 表示最小化
	* CWnd::ShowWindow --- SW_RESTORE 可以还原窗口
	* Windows API 函数 GetCursorPos 获取光标所在位置
	* CMenu::TrackPopupMenu --- 弹出菜单
	* 使用宏 ON_MESSAGE(WM_TRAYMESSAGE ,OnTrayMessage)  --- 将自定义消息发送到自定义函数

= 实例08 带背景的工具栏 =
	* ToolbarBacePic
	* CReBar 类 --- 可以自定义工具栏信息
	* 调用 CReBar 的 AddBar, RedrawWindow 函数, 而后调用其CReBarCtrl的SetBandInfo设置第一个band信息
	* 使用结构体 REBARBANDINFO 来设置band信息, 如果要设置背景, 则使用标志 RBBIM_BACKGROUND., 并设置该info的 hbmBack 成员(该成员类型为HBITMAP)
	* 使用 LoadBitmap 加载一个位图
		* LoadBitmap(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDB_BTMBACK)); 
		* AfxGetInstanceHandle() 得到当前应用程序的实例句柄
		* MAKEINTRESOURCE 将资源ID转换为字符串, 用于要求字符串资源的地方

= 实例09 带图标的工具栏 =
	* ToolIcon
	* 使用CToolBarCtrl类的SetImageList方法设置工具栏的图标
	* CToolBarCtrl的方法SetButtonSize(), SetBitmapSize() 设置按钮和图标大小

= 实例10 带下拉菜单的工具栏 =
	* ToolbarWithMenu
	* CToolBarCtrl 调用方法 SetExtendedStyle 设置属性 TBSTYLE_EX_DRAWDDARROWS, 这样就允许有BTNS_DROPDOWN属性的按钮有下拉菜单
	* 使用 ON_NOTIFY 宏设置工具栏的 TBN_DROPDOWN 消息
	* CToolBar 的 CommandToIndex 方法
	* 使用 reinterpret_cast<LPNMTOOLBAR> 方法将参数的 NMHDR 类型转换成 NMTOOLBAR 类型
	* 可使用 pWnd->SendMessage 发送消息 TB_GETRECT 得到项目矩形. 其中 pWnd 为工具栏窗口

= 实例11 可调整按钮位置的工具栏 =
	* ToolbarAdjustBtn
	* 只是使用CToolBar的SetButtonInfo设置该位置的按钮为另一个按钮的资源ID和图像索引

= 实例12 可浮动的工具栏 =
	* ToolbarFloat
	* 工具栏创建的时候设置风格 CBRS_FLOATING
	* 调用 FloatControlBar 设置浮动工具栏

= 实例13 根据表中数据动态生成工具栏 =
	* ToolbarBtnFromList
	* CToolBarCtrl::AddButtons 方法增加按钮, DeleteButtons 删除按钮
	* CTOolBarCtrl::EnableAutomation --- 该方法允许对象的OLE自动化
	* CToolBarCtrl::AutoSize --- 重置整个工具条, 当父窗口大小变化时或者工具条大小变化时要调用该函数(例如设置按钮和位图大小, 或添加字符串)

= 实例014 具有提示功能的工具栏 =
	* ToolbarHint
	* 文档程序默认实现了工具栏的提示功能
	* 对话框程序需要增加 TTN_NEEDTEXT 消息, 工具栏需要 CBRS_TOOLTIP 风格
	* CToolBar::SetButtonText --- 可以设置按钮上的文字
	* 在 TTN_NEEDTEXT 消息的处理函数中, 需要使用 TOOLTIPTEXT 结构体指针指向参数指针, 设置其 lpszText 成员为提示消息的文本

= 实例015 带进度条的状态栏 =
	* 控件 CProgress, 注意使用 ShowWindow, UpdateWindow 让其显示. SetRange, SetPos 设置其参数
	* 使用定时器, SetTimer 和 KillTimer 为设置定时器和取消定时器的函数 
= 实例016 动画效果的状态类 =
	* 控件 CAnimateCtrl  用于播放 avi 动画, 用 SetParent 方法设置状态栏为其父窗口
	* 使用 RepositionBars(AFX_IDW_CONTROLBAR_FIRST, AFX_IDW_CONTROLBAR_LAST, 0, reposQuery, rcClientNow); 重置所有控件. 而后才能重新获取状态栏等控件的信息. 例如:　m_statusBar.GetStatusBarCtrl().GetRect(2, &rect);
= 实例017 滚动字幕的状态栏 =
	* ScrollStatus
	* 使用 MoveWindow 实现
= 实例018 Outlook 导航界面 =
	* OutInterface
	* CPtrArray --- 控制数组指针
	* CStringList --- 字符串列表
	* CWnd::DestroyWindow --- 销毁一个窗口
	* CListCtrl::GetSelectionMark --- 列表视图控件的选择内容
	* COutlookList::PreTranslateMessage --- 拦截所有对按钮的列表视图控件的双击操作
	* PreSubclassWindow --- 在该窗口被子类化之前的操作, 可以用于创建和初始化一些内容, 这里创建和初始化按钮的视图列表
	* OnCmdMsg --- 处理控件上的命令消息, 个人认为是控件窗口上的Command命令 WM_COMMAND.
	* 本例使用在视图列表控件中使用另一个视图列表控件显示每个按钮相关联的视图列表. 个人认为可以使用其他控件来实现这个视图列表, 比如Static, Picture控件
