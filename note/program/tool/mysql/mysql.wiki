== 3.1 连接和断开服务器 ==
* 连接服务器
{{{
mysql -h host -u user -p
}}} 
	- 连接相同机器可以忽略 host
	- 如果允许匿名登录, 则可以忽略user和password
	- QUIT 断开连接.

== 3.2 输入查询 ==
* 查询
{{{
SELECT VERSION(), CURRENT_DATE;
}}} 
* 一个命令由 SQL 语句跟一个分号实现. 除了QUIT
* 不区分大小写
{{{
SELECT SIN(PI()/4), (4+1)*5;
}}} 
* 可以一行多个命令语句.
* 如果你不想执行正在输入的语句, 可以输入 \c
* 提示符
	- mysql> 准备新的命令
	- -> 等待多行命令的下一行
	- '> 等待下一行, 等待一个以(')开始的字符串的结束.
	- "> 同上, 只是字符串以(")开始
	- `> 等待下一行, 等待以该符号开始的标识符的结束.
	- /*> 等待下一行, 等待以这个符号开始的注释的结束.
* 显示数据库, 其中 mysql 为用户特权数据库, test 为测试数据库
{{{
SHOW DATABASES;
}}} 
* 使用数据库, 这个命令不需要分号. 这个语句必须单行.
{{{
USE test
}}} 
* 允许某人访问数据库 menagerie
{{{
mysql> GRANT ALL ON menagerie.* TO 'your_mysql_name'@'your_client_host';
}}} 

== 3.3 创建和使用数据库 ==
* 创建数据库
{{{
CREATE DATABASE menagerie;
}}} 
* 可以在启动MYSQL时选择数据库, -p命令不带空格则可以输入密码, 如 -pmypassword
{{{
mysql -h host -u user -p menagerie
}}} 
* 当前选择的数据库
{{{
SELECT DATABASE();
}}} 
* 显示有哪些表格
{{{
SHOW TABLES;
}}} 
* 创建表格, 修改表格使用 ALTER TABLE 命令.
{{{
CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20), species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);
}}} 
* 显示表格内容
{{{
DESCRIBE pet;
}}} 
* 添加数据, LOAD DATA 或 INSERT 语句.
	- 导入文本方式, 值之间用tab字符分隔, 可以使用NULL表示空白, 可使用 \N 表示.
{{{
LOAD DATA LOCAL INFILE 'H:/Code/pet.txt' INTO TABLE pet;
}}} 
	- 如果使用Windows, 则可能需要使用语句 LINES TERMINATED BY '\r\n' 表示以 "\r\n" 作为行尾结束符.
	- INSERT 语句. 
{{{
INSERT INTO pet VALUE ('Puffball','Diane','hamster','f','1999-03-30',NULL);
}}} 
* SELECT 语句
{{{
SELECT what_to_select
FROM which_table
WHERE conditions_to_satisfy;
}}} 
* 修改表格, 两种方法
	- 编辑pet.txt文件, 将错误的地方改成正确的, 而后使用 DELETE 和 LOAD DATA;
{{{
DELETE FROM pet;
LOAD DATA LOCAL INFILE 'pet.txt' INTO TABLE pet;
}}} 
	- 使用 UPDATE 语句
{{{
UPDATE pet SET birth = '1989-08-31' WHERE name = 'Bowser';
}}}
* 选择特定行, 字符串比较是大小写不敏感的.
{{{
SELECT * FROM pet WHERE name = 'Bowser';
SELECT * FROM pet WHERE birth >= '1998-1-1';
SELECT * FROM pet WHERE species = 'dog' AND sex = 'f';
SELECT * FROM pet WHERE species = 'snake' OR species = 'bird';
SELECT * FROM pet WHERE (species = 'cat' AND sex = 'm') OR (species = 'dog' AND sex = 'f');
}}}
* 选择特定列, DISTINCT 使得输出结果唯一不会重复.
{{{
SELECT name, birth FROM pet;
SELECT owner FROM pet;
SELECT DISTINCT owner FROM pet;
SELECT name, species, birth FROM pet WHERE species = 'dog' OR species = 'cat';
}}}
* 排序行, 使用 ORDER, 默认比较大小写不敏感, 如果需要敏感则使用 BINARY, 如 ORDER BY BINARY col_name. 默认排序为升序. 使用 DESC 则为降序. 可以多个列进行排序, 每个列可以不同的排序方向.
{{{
SELECT name, birth FROM pet ORDER BY birth;
SELECT name, birth FROM pet ORDER BY birth DESC;
SELECT name, species, birth FROM pet ORDER BY species, birth DESC;
}}} 
* 日期计算,  TIMESTAMPDIFF() 函数计算年龄. 第一个参数为结果表达的单位, 后面两个参数为比较的两个日期. alias 可用作列别名.
{{{
SELECT name, birth, CURDATE(), TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age FROM pet;
SELECT name, birth, CURDATE(), TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age FROM pet ORDER BY name;
SELECT name, birth, CURDATE(), TIMESTAMPDIFF(YEAR,birth,CURDATE()) AS age FROM pet ORDER BY age;
SELECT name, birth, death, TIMESTAMPDIFF(YEAR,birth,death) AS age FROM pet WHERE death IS NOT NULL ORDER BY age;
}}}
	- NULL 最好使用 IS NOT NULL 比较, 而非使用 <> NULL 来进行比较.
	- MYSQL 提供了函数用于从日期中提取部分, 如 YEAR(), MONTH(), DAYOFMONTH().
{{{
SELECT name, birth, MONTH(birth) FROM pet;
}}} 
	- DATE_ADD() 允许你添加一个时间间隔.
{{{
SELECT name, birth FROM pet WHERE MONTH(birth) = MONTH(DATE_ADD(CURDATE(),INTERVAL 1 MONTH));
}}}
	- 还可以使用 MOD() 来实现上面语句的功能.
{{{
SELECT name, birth FROM pet WHERE MONTH(birth) = MOD(MONTH(CURDATE()), 12) + 1;
}}} 
* NULL 值
	- 使用 IS NULL 和 IS NOT NULL 测试 NULL.
{{{
SELECT 1 IS NULL, 1 IS NOT NULL;
}}} 
	- 不能对NULL使用 =, <, 或 <> 比较操作符.
	- 0和NULL为假, 其他为真, 默认布尔真值为1.
	- 进行排序时, 如果是升序则NULL的值最先出现.
	- 0 IS NOT NULL 为真, '' IS NUOT NULL 为真.
* 模式匹配
	- MYSQL 提供了基本的 SQL 模式匹配以及基于扩展正则表达式形式的模式匹配.
	- SQL 模式匹配使用"_"匹配任意单个字符, "%"匹配任意数量的字符(包括0个字符). MYSQL中, SQL模式默认为大小写不敏感的. 当你使用SQL模式时, 不使用=或者<>, 而使用 LIKE 或 NOT LIKE 比较操作符.
	- 发现以"b"开始的名称, 以"fy"结尾的名称, 含有一个"w"的名称, 五个字符的名称
{{{
SELECT * FROM pet WHERE name LIKE 'b%';
SELECT * FROM pet WHERE name LIKE '%fy';
SELECT * FROM pet WHERE name LIKE '%w%';
SELECT * FROM pet WHERE name LIKE '_____';
}}} 
	- 当使用扩展正则表达式进行模式匹配时, 使用 REGEXP 和 NOT REGEXP(或者 RLIKE 和 NOT RLIKE)
		# '.' 匹配任意单个字符.
		# "[...]" 匹配方括号内任意字符. 里面可以用 "-" 表示字符范围.
		# '*' 匹配前面一项零次或多次.
		# 只要在值中任意部分匹配则该 REGEXP 匹配成功.
		# '^' 和 '$' 表示匹配模式的头和尾.
		# 使用 BINARY 关键词可以使得匹配大小写敏感.
		# 可以使用 {n} 表示重复次数.
{{{
SELECT * FROM pet WHERE name REGEXP '^b';
SELECT * FROM pet WHERE name REGEXP BINARY '^b';
SELECT * FROM pet WHERE name REGEXP 'fy$';
SELECT * FROM pet WHERE name REGEXP 'w'; // 包含w
SELECT * FROM pet WHERE name REGEXP '^.....$'; // ^ 和 $ 确保刚好五个字符.
SELECT * FROM pet WHERE name REGEXP '^.{5}$';
}}} 
* 统计列
	- 有多少的宠物
{{{
SELECT COUNT(*) FROM pet;
}}}
	- 每个拥有者有多少的宠物, 使用 GROUP BY 进行分组.
{{{
SELECT owner, COUNT(*) FROM pet GROUP BY owner;
SELECT species, COUNT(*) FROM pet GROUP BY species;
SELECT sex, COUNT(*) FROM pet GROUP BY sex;
SELECT species, sex, COUNT(*) FROM pet GROUP BY species, sex;
SELECT species, sex, COUNT(*) FROM pet WHERE species = 'dog' OR species = 'cat' GROUP BY species, sex;
SELECT species, sex, COUNT(*) FROM pet WHERE sex IS NOT NULL GROUP BY species, sex;
}}} 
	- 如果允许 ONLY_FULL_GROUP_BY SQL 模式, 则会有错误发生.
	- 如果使用 COUNT(*) 且不使用 GROUP BY, 则结果的值可能未知.
* 使用多个表格
{{{
CREATE TABLE event (name VARCHAR(20), date DATE, type VARCHAR(15), remark VARCHAR(255));
LOAD DATA LOCAL INFILE 'H:/Code/event.txt' INTO TABLE event LINES TERMINATED BY '\r\n';
}}}
	- 查询多个表
{{{
SELECT pet.name, (YEAR(date)-YEAR(birth)) - (RIGHT(date,5)<RIGHT(birth,5)) AS age, remark FROM pet INNER JOIN event ON pet.name = event.name WHERE event.type = 'litter';
}}} 
	- 内连接表示当且仅当来自两个表的行都满足ON语句的条件时才显示其结果.
	- 由于两个表都有 name 列, 你必须指定显示哪个表的name, 如上 pet.name.
	- 一个表可以连接自己. 如比较表中不同的记录.
{{{
SELECT p1.name, p1.sex, p2.name, p2.sex, p1.species FROM pet AS p1 INNER JOIN pet AS p2 ON p1.species = p2.species AND p1.sex = 'f' AND p2.sex = 'm';
}}} 

== 3.4 得到关于数据库和表的信息 ==
* 当前使用的数据库 DATABASE()
{{{
SELECT DATABASE();
}}} 
* 显示表格 SHOW TABLES;  表格结构 DESCRIBE table_name; DESC 是 DESCRIBE 的缩写.
* SHOW CREATE TABLE table_name --- 查看已创建的表格.
* SHOW INDEX FROM tbl_name 显示表格上的索引.

== 3.5 批模式使用 MySQL ==
* 从文件中读取输入
{{{
shell> mysql < batch-file
}}} 
* 如果在windows下运行, 有一些特殊字符.
{{{
mysql -e "source batch-file'
}}} 
* 如果你需要在命令行中指定连接参数
{{{
shell> mysql -h host -u user -p < batch-file
Enter password: ********
}}} 
* 如果你希望脚本出现错误仍继续, 则使用 --force 命令行选项.
* 如果生成的输出内容很多, 可以使用pager分页观察
{{{
shell> mysql < batch-file | more
}}} 
* 你可以将输出放在一个文件中以便进一步处理
{{{
shell> mysql < batch-file > mysql.out
}}} 
* 批模式的输出很简洁, 如果你希望原来的输出格式, 则可使用 mysql -t 来实现. 对于输出的执行命令的echo, 可以使用 mysql -vvv.
* 还可以在mysql提示符中使用source命令或 \. 命令来使用脚本.
{{{
mysql> source filename;
mysql> \. filename
}}} 

== 3.6 常见查询例子 ==
* 用处测试的表格
{{{
CREATE TABLE shop (
    article INT(4) UNSIGNED ZEROFILL DEFAULT '0000' NOT NULL,
    dealer  CHAR(20)                 DEFAULT ''     NOT NULL,
    price   DOUBLE(16,2)             DEFAULT '0.00' NOT NULL,
    PRIMARY KEY(article, dealer));
INSERT INTO shop VALUES
    (1,'A',3.45),(1,'B',3.99),(2,'A',10.99),(3,'B',1.45),
    (3,'C',1.69),(3,'D',1.25),(4,'D',19.95);
}}}
* 一个列的最大值.
{{{
SELECT MAX(article) AS article FROM shop;
}}} 
* 某列最大值的那一行
{{{
SELECT article, dealer, price
FROM   shop
WHERE  price=(SELECT MAX(price) FROM shop);
}}} 
	- 或者使用左连接降序排序所有行, 而后使用 LIMIT 语句得到第一行.
{{{
SELECT s1.article, s1.dealer, s1.price
FROM shop s1
LEFT JOIN shop s2 ON s1.price < s2.price
WHERE s2.article IS NULL;

SELECT article, dealer, price
FROM shop
ORDER BY price DESC
LIMIT 1;
}}} 
* 每组列的最大值
{{{
SELECT article, MAX(price) AS price
FROM   shop
GROUP BY article;
}}} 
* 拥有每组某列最大值的行.
{{{
SELECT article, dealer, price
FROM   shop s1
WHERE  price=(SELECT MAX(s2.price)
              FROM shop s2
              WHERE s1.article = s2.article);
}}} 
	- 上面使用了 correlated subquery, 还可以在FROM语句中使用 uncorrelated subquery 或者使用左连接.
	- Uncorrelated subquery:
{{{
SELECT s1.article, dealer, s1.price
FROM shop s1
JOIN (
  SELECT article, MAX(price) AS price
  FROM shop
  GROUP BY article) AS s2
  ON s1.article = s2.article AND s1.price = s2.price;
}}} 
	- LEFT JOIN:
{{{
SELECT s1.article, s1.dealer, s1.price
FROM shop s1
LEFT JOIN shop s2 ON s1.article = s2.article AND s1.price < s2.price
WHERE s2.article IS NULL;
}}} 
* 使用用户定义的变量. 你可以使用用户变量存储结果.
{{{
SELECT @min_price:=MIN(price),@max_price:=MAX(price) FROM shop;
SELECT * FROM shop WHERE price=@min_price OR price=@max_price;
}}} 
* 使用外键
