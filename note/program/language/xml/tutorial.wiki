= XML 教程 =
== XML 树 ==
* XML 文档必定含有一个根元素.

== XML 语法规则 ==
* 所有的XML元素必须有一个关闭tag, 和html的<p>不同.
* XML Tags 为大小写敏感的
* XML 元素必须正确地嵌套.
* XML 属性值必须用引号括起来.
{{{xml
<note date="12/11/2007">
	<to>Tove</to>
	<from>Jani</from>
</note>
}}} 
* Entity References
|        |    |
|--------|----|
| &it;   | <  |
| &gt;   | >  |
| &amp;  | &  |
| &apos; | '  |
| &quot; | "" |
* 注释 <!-- This is a comment -->
* XML 保留空格
* XML 存储新行为LF

== XML Element ==
* 一个 XML Element 为开始tag到结束tag之间的内容
* 其可包含
	- 其他 element
	- 文本
	- 属性
	- 以上的组合.
* 空 XML 元素
{{{xml
<book></book>
}}}
	- 可以写成如下格式
{{{xml
<book />
}}} 
* XML 命名规则
	- 可以包含字母, 数字, 其他字符
	- 不能以数字或者标点符号开始
	- 不能以xml开始
	- 不能包含空格
* 命名最佳做法
	- 名称可解释: <first_name>, <last_name>
	- 名称尽可能短: <book_title> 而非 <the_title_of_the_book>
	- 避免"-"
	- 避免"."
	- 避免":"
* 命名风格
| 风格        | 例子         | 描述                                   |
|-------------|--------------|----------------------------------------|
| 小写        | <firstname>  | 所有字母小写                           |
| 大写        | <FIRSTNAME>  | 所有字母大写                           |
| 下划线      | <first_name> | 下划线分隔单词                         |
| Pascal case | <FirstName>  | 每个单词第一个字母大写                 |
| Camel case  | <firstName>  | 除了第一个单词, 每个单词第一个字母大写 |
	- 如果你选择了一个命名风格, 最好坚持.
	- 如果XML和数据库关联, 则应和数据库命名规则保持一致.

== XML 属性 ==
* XML 元素可以有属性.
* 可以提供非数据一部分的信息.
{{{xml
<file type="gif">computer.gif</file>
}}} 
* XML 属性必须被引号括起来, 单引号双引号都可以, 如果属性值含双引号, 可以用单引号括起来, 叶可以使用 Entity References
* XML 可以使用元素, 也可以换成属性.
* 避免使用属性
	- 属性不能有多个值
	- 属性不能包含树结构
	- 属性不易扩展
* 属性用于和数据不相关的信息.
* 用于 Metadata的XML属性. 分配给元素的ID引用.
{{{xml
<messages>
  <note id="501">
    <to>Tove</to>
    <from>Jani</from>
    <heading>Reminder</heading>
    <body>Don't forget me this weekend!</body>
  </note>
  <note id="502">
    <to>Jani</to>
    <from>Tove</from>
    <heading>Re: Reminder</heading>
    <body>I will not</body>
  </note>
</messages>
}}} 
	- metadata(数据的数据)应该存储为属性, 而数据则存储为元素.

== XML 名称空间 ==
* 使用名字前缀解决名字冲突问题.
{{{xml
<h:table>
  <h:tr>
    <h:td>Apples</h:td>
    <h:td>Bananas</h:td>
  </h:tr>
</h:table>

<f:table>
  <f:name>African Coffee Table</f:name>
  <f:width>80</f:width>
  <f:length>120</f:length>
</f:table> 
}}} 
* 名称空间由 xmins 属性定义. 语法为 xmlns:prefix="URI"
{{{xml
<root>

<h:table xmlns:h="http://www.w3.org/TR/html4/">
  <h:tr>
    <h:td>Apples</h:td>
    <h:td>Bananas</h:td>
  </h:tr>
</h:table>

<f:table xmlns:f="http://www.w3schools.com/furniture">
  <f:name>African Coffee Table</f:name>
  <f:width>80</f:width>
  <f:length>120</f:length>
</f:table>

</root> 
}}} 
	- 当一个元素定义了名字空间, 所有有相同前缀的子元素都关联至该相同的名称空间.
	- 名称空间可以定义域根元素.
{{{xml
<root xmlns:h="http://www.w3.org/TR/html4/"
xmlns:f="http://www.w3schools.com/furniture">

<h:table>
  <h:tr>
    <h:td>Apples</h:td>
    <h:td>Bananas</h:td>
  </h:tr>
</h:table>

<f:table>
  <f:name>African Coffee Table</f:name>
  <f:width>80</f:width>
  <f:length>120</f:length>
</f:table>

</root> 
}}} 
	- 名字空间的URI并不被分析器用来查找信息.
* Uniform Resource Identifier (URI) --- 为一个字符串,  用于联系一个网络资源.
	- 常用URI为 Uniform Resource Locator (URL)
	- 其他不常用的URI有 Universal Resource Name (URN)
* 默认名字空间 --- 用于避免所有子元素使用前缀. 语法如下
{{{
xmlns="namespaceURI" 
}}} 
	- 带有HTML表格信息的XML
{{{xml
<table xmlns="http://www.w3.org/TR/html4/">
  <tr>
    <td>Apples</td>
    <td>Bananas</td>
  </tr>
</table> 
}}}
* 实际使用的名字空间.
	- XSLT 为一个XML语言, 可用于变换 XML 文档为其他格式, 如 HTML.
	- 非HTML tags的tags带有前缀xsl. 由名字空间识别: xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
{{{xml
<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:template match="/">
<html>
<body>
  <h2>My CD Collection</h2>
  <table border="1">
    <tr>
      <th style="text-align:left">Title</th>
      <th style="text-align:left">Artist</th>
    </tr>
    <xsl:for-each select="catalog/cd">
    <tr>
      <td><xsl:value-of select="title"/></td>
      <td><xsl:value-of select="artist"/></td>
    </tr>
    </xsl:for-each>
  </table>
</body>
</html>
</xsl:template>

</xsl:stylesheet> 
}}} 

== XML 编码 ==
* XML 文档可以包含 国际字符, 所以要指定其使用的编码.
* 字符编码
	- Unicode, 有两个变种 UTF-8, UTF-16.  UTF = Universal character set Transformation Format.
	- UTF-8: 网络标准.
* XML 编码
	- 第一行称之为 prolog, 可选的, 通常包含XML版本号. 可包含编码. UTF-8 为默认编码.
{{{xml
<?xml version="1.0"?> 
<?xml version="1.0" encoding="UTF-8"?> 
}}} 

== 查看 XML 文件 ==
* 查看一个无效的XML文件. 报错.

== 用CSS显示XML ==
* 在头部链接至一个css文件.
{{{xml
<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="cd_catalog.css"?>
}}}
* 推荐使用 XSLT 显示XML.

= XML 验证 =
== XML 文档类型 ==
* Well Formed 的XML文档
	- 一个文档有正确的语法被称为"Well Formed"
	- 语法规则如下:
		- XML 文档必须有一个根元素
		- XML 元素必须有一个关闭tag
		- XML tags为大小写敏感
		- XML 元素必须正确地嵌套
		- XML 属性值必须被引号括起来.
* 有效的XML文档
	- 一个有效的XML文档并非等同于"well formed"XML文档.
	- 第一条规则只用于 well formed 文档
	- 第二条规则是有效文档必须遵守的规则.
	- 定义XML合法元素和属性的规则常被称为文档定义, 或者文档schemes.
* 何时使用文档定义
	- 提供一个文档合法元素和属性其参考的最简单方法的参考.
	- 提供许多用户可以分享的参考.
	- 提供了标准化
* 何时不使用文档定义
	- 试验XML, 很小的XML文件, 创建文档定义很费时.
	- 如果你开发应用, 在添加文档定义之前等待其规则稳定下来.
* 文档定义
	- 可以使用的不同文档定义:
		- The original Document Type Definition (DTD)
		- The newer, and XML based, XML Schema

== XML 验证器 ==
* 使用 XML 验证器对你的XML进行语法检查
* XML文档中的错误会中止你的XML应用, 对于XML, 错误是不允许的.

== XML DTD ==
* 一个XML文档有正确的语法则被称为"Well Formed"
* 一个XML 用DTD验证通过则为"Well Formed"和"Valid"
* 一个"有效"的XML文档是一个"well formed"XML文档, 也遵守DTD规则.
{{{xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note SYSTEM "Note.dtd">
<note>
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
</note>
}}} 
	- 上面的例子关联至一个外部DTD文件.
* DTD的目的是定义一个XML文档的结构.啊定义以下合法元素的结构.
{{{xml
<!DOCTYPE note
[
<!ELEMENT note (to,from,heading,body)>
<!ELEMENT to (#PCDATA)>
<!ELEMENT from (#PCDATA)>
<!ELEMENT heading (#PCDATA)>
<!ELEMENT body (#PCDATA)>
]>
}}} 
	- !DOCTYPE note --- 文档根元素为note
	- !ELEMENT note --- note元素包含四个元素
	- !ELEMENT to --- to元素的类型为 "#PCDATA"
	- ... 如上
	- #PCDATA 表示可分析的文本数据.
* 使用DTD用于 Entity Declaration
	- doctype 声明也可用于定义特殊字符和字符串, 用于以下文档
{{{xml
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE note [
<!ENTITY nbsp "&#xA0;">
<!ENTITY writer "Writer: Donald Duck.">
<!ENTITY copyright "Copyright: W3Schools.">
]>

<note>
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
<footer>&writer;&nbsp;&copyright;</footer>
</note> 
}}} 
	- 一个 entity 有三个部分:　an ampersand (&), an entity name, and a semicolon (;).

== XML Schema ==
* Schema 描述XML文档的结构.
{{{class="brush: xml"
<xs:element name="note">

<xs:complexType>
  <xs:sequence>
    <xs:element name="to" type="xs:string"/>
    <xs:element name="from" type="xs:string"/>
    <xs:element name="heading" type="xs:string"/>
    <xs:element name="body" type="xs:string"/>
  </xs:sequence>
</xs:complexType>

</xs:element>
}}} 
	- <xs:element name="note"> --- 定义一个被称为"note"的元素
	- <xs:complexType> --- 表示"note"元素是一个复杂类型.
	- <xs:sequence> --- 表示该复杂类型是一个序列
	- <xs:element name="to" type="xs:string">  --- "to"元素是一个字符串类型
	- ... 同上
* XML Schemas 支持数据类型.

= XML JavaScript =
== XMLHttpRequest对象 ==
* XMLHttpRequest 对象用于和场景后的服务器交换数据
* 作用
	- 无需重载页面就可以更新网页
	- 页面加载后从服务器中请求数据
	- 页面加载后从服务器中接收数据
	- 在后台向服务器发送数据
* 要了解更多, 学习 XML DOM 教程
* 所有现代浏览器都有一个内置的 XMLHttpRequest 对象, 语法如下:
{{{class="brush: xml"
xmlhttp = new XMLHttpRequest();
}}} 

== XML Parser ==
* 所有现代浏览器有一个内置的 XML Parser. 一个XML Parser 可以将 XML 文档转换至一个 XML DOM 对象(可以由JavaScript操作的对象).
=== 分析一个XML文档 ===
{{{class="brush: JavaScript"
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
  }
xmlhttp.open("GET","books.xml",false);
xmlhttp.send();
xmlDoc=xmlhttp.responseXML; 
}}}
=== 分析一个XML字符串 ===
{{{class="brush: JavaScript"
txt="<bookstore><book>";
txt=txt+"<title>Everyday Italian</title>";
txt=txt+"<author>Giada De Laurentiis</author>";
txt=txt+"<year>2005</year>";
txt=txt+"</book></bookstore>";

if (window.DOMParser)
  {
  parser=new DOMParser();
  xmlDoc=parser.parseFromString(txt,"text/xml");
  }
else // Internet Explorer
  {
  xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
  xmlDoc.async=false;
  xmlDoc.loadXML(txt);
  } 
}}}
=== Access Across Domain ===
* 现代浏览器不允许跨域访问.
* 如果想要加载网页和XML文件, 两者则必须位于同一个服务器.
== XML DOM ==
