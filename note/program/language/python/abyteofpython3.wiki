* help(...) 为内置函数
* 数的三种类型: 整数, 浮点数, 复数
* 使用ascii: str.encode('ascii')
* 三引号: 多行字符
* 字符串末尾反斜杠表示继续
* 正则表达式使用自然字符串
* {} 以及 format() 用来格式化字符串
{{{class="brush: python"
'{0:.3}'.format(1/3)
'{0:_^11}'.format('hello')
}}} 
* 分号表示逻辑行的结束
* 三种缩进风格: 制表符, 2个空格, 4个空格
* 操作符: +, -, *(可重复字符串), **(power), /, //(商求floor), %(求模), <<, >>, &, !, ^, ~, <, >, <=, >=, ==, !=, not, and, or
* 还有 *= 这样的操作符
* if, elif, else
* 没有 switch 语句
* while 语句(有else子句)
* for...in 在序列中迭代, 也有else语句
* range() 可以得到一个序列
* len() 计算字符串长度
* break, continue 语句
* 所有变量的作用域是它们被定义的块
* global 语句, 表示该变量是一个全局变量, 可同时指定多个全局变量
* 非局部域, nonlocal 语句, 表示该变量非局部变量, 也非全局变量
* 设置默认参数, 与C++相同
* 关键参数--用于只为想要的参数赋值, 用法: 通过名字来给函数指定实参
* VarArgs 参数可用于能获取任意参数的函数, 通过*号来实现. * 收集所有的参数, ** 收集所有的关键字参数
* Keyword-only 参数: 指定特定的关键参数为 keyword-only 参数而不是位置参数, 可在带星的参数后声明
	- 如果想用 keyword-only 参数, 且不用带星的参数, 则可使用不用名字的空星, 如 def total(initial=5, *, vegetables)
* return 函数返回, 没有返回值的return语句等于 return None
* docstring: 使程序文档更加简单易懂. 在函数的第一个逻辑行的字符串是这个函数的文档字符串. DocStrings 也适用于模块和类.
	- 文档字符串的惯例是一个多行字符串, 首行以大写字母开始, 句号结尾. 第二行是空行, 从第三行开始是详细的描述.
* python 列表从0开始计数
* sys.argv, sys.path, os.getcwd()(当前目录)
* 按字节编译的文件, 以 .pyc 作为扩展名, 与平台无关.
* 直接输入 argv 变量到你的程序中(避免每次使用它时打 sys), 可用 from sys import argv 语句. 如果想要输入所有 sys 模块所使用的名字, 可用 from sys import * 语句.
* 每个 python 模块都有它的 __name__,  如果它是  ' __main__ ' , 那么说明这个模块被用户单独运行
* 内置的 dir() 函数可以列出一个模块内的标识符, 其还可用于任意对象, 例如函数, 则列出函数的属性
* del 语句删除名字或变量
* 特殊的 __init__.py 文件, 用于表示其所在文件夹是特殊的, 其包含 Python 模块, 形成包.
* 列表每个项目用逗号分割, 包括在方括号内
* 列表是可变的, 字符串和元组是不可变的, 元组通过圆括号中用逗号分割的项目定义. 元组通常用在使语句或用户定义的函数能够安全地采用一组值的时候.
* 空元组是由一对空的圆括号组成, 例如 myempty=(). 单个元素的元组需要在第一个项目后跟一个逗号
* 只能使用不可变的对象(比如字符串)来作为字典的键, 但可把不可变或可变的对象作为字典的值. 标记: d = (key1 : value1, key2 : value2}
* 列表, 元组, 字符串都是序列, 主要特点为索成员检验(例如, 在和不在表达式中)和索引操作符. 这三者有切片操作, 使用冒号表示 [起始位置:终点位置], 可以有第三个参数, 表示步长
* 集合是没有顺序的简单对象的聚集. 当剧集中一个对象的存在比其顺序或出现的次数重要时使用集合. 使用集合, 可以检查是否是成员, 是否是另一个集合的子集, 得到两个集合的交集等等.
	- set 设置集合
	- in 判断是否含有, copy(), add(), remove(), & 操作
* 对于列表, 序列或其他复杂的对象, 使用切片操作符取得拷贝.
* 程序中所使用的字符串都是 str 类的对象
* 字符串: str类的对象, startswith(), in, find(), join
* 域和方法合称为类的属性, 域有两种类型 --- 实例变量和类变, 类使用 class 关键字创建, 类的域和方法被列在一个缩进块中.
* 类方法有额外的一个参数 self.
* pass 语句, 构建空白快
* 类中有方法: __init__(), 用于初始化, 可看成是构造函数, 析构函数为 __del__
* 类的方法中也有静态方法
{{{class="brush: python"
@staticmethod
def howMany():
	...
}}} 
* 类的数据成员以下划线前缀如 __privatevar, 则认为是私有变量
* 可以通过创建一个 file 类的对象来打开一个文件, 分别使用 file 类的 read, readline, write 方法来恰当地读写文件. close方法关闭文件
* pickle 标准模块, 其可以将任意对象存储在文件中, 之后再完整取出来, 即为持久地存储对象
* 使用 try...except 语句处理异常
* raise 语句引发异常, 可以引发的错误或异常应该分别是 Eorror 或 Exception 类的直接或间接导出类
* finally 语句可以确保一段代码最后被执行
* sys.argv 列表包含命令行参数,  sys.version_info 列表有版本信息. warnings 模块用于警告
* logging 模块可以得到调试信息, 重要信息等等
* 使用元素可以在一个函数中返回两个不同的值.
* 类的特殊函数: init, del, str, lt, getitem, len
* 可以有单语句块, 如
{{{class="brush: python"
flag = True
if flag: print 'Yes'
}}} 
* lambda 语句用来创建新的函数对象, 并在运行时返回它们
* 列表综合: 从一个已有的列表导出一个新的列表
* 在函数中接收元组和列表
* exec 语句: 执行储存在字符串或文件中的Python语句, eval 函数则执行存储在字符串中的 Python 表达式
* assert 语句用来声明某个条件是真的.
* repr 函数用来取得对象的规范字符串表示, 大多数时候 eval(repr(object)) == object. 即用来获取对象的可打印的表示形式
