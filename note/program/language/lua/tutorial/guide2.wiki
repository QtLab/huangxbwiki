= Lua 笔记 第9-13章 =

== 第9章 协同程序 ==
* 协同程序(coroutine)有自己的堆栈, 自己的局部变量, 自己的指令指针, 但与其他协同程序共享全局变量等很多信息,
    - 与线程的不同之处在于: 在多处理器情况下, 从概念上多线程程序同时运行多个线程,
    - 而协同程序是通过协作来完成, 在任一指定时刻只有一个协同程序在运行, 并且这个正在运行的协同程序只在必要时才会被挂起.
* Lua的所有协同函数存放于 coroutine table 中. create函数用于创建新的协同程序, 其中只有一个参数: 一个函数, 即协同程序即将运行的代码
    - 如顺利, 返回值为thread类型, 通常情况下create函数的参数是匿名函数
* 协同有三个状态: 挂起态(suspended), 运行态(running), 停止态(dead), 可用status函数检查协同的状态:
        - print(coroutine.status(co))
    - 函数coroutine.resume 是协同程序由挂起状态变为运行态
        - coroutine.resume(co)
    - yield函数, 可以将正在运行的代码挂起
{{{ 
        co = coroutine.create( function ()
            for i = 1, 10 do
                print("co", i)
                coroutine.yield()
            end
        end)
}}}
    - 终止态之后再调用resume会返回false和错误信息
    - resume运行在保护模式下, 如果协同程序内部存在错误, Lua并不会抛出错误, 而是将错误返回给resume函数
* Lua中协同的强大能力, 还在于通过resume-yield来交换数据
    # 只有resume, 没有yield, resume把参数传递给协同的主程序
        - coroutine.resume(co, 1, 2, 3)
    # 数据有yield, resume的返回值为true和yield的参数, resume的参数会传递给yield, yield的返回值为resume的参数
    # 协同代码结束时的返回值, 也会传给resume, 即resume的返回值为true和结束时的返回值
* Lua中使用的协同是不对称协同(asymmetric coroutine)
    - 对称协同: 对同一个函数负责"执行与挂起间的状态切换"
* 协同最具代表性的例子是用来解决生产者-消费者问题
    - 当一个协同调用yield时不会进入一个新的函数, 而是返回一个未决的resume的调用
    - 调用resume时不会进入一个新的函数, 而是返回一个yield的调用
* 协同的一个关键特征是它可以不断颠倒调用者和被调用者之间的关系, 这样我们毫无顾虑的使用它实现一个迭代器, 而不用保存迭代函数返回的状态.
* 与create相同的是, wrap创建一个协同程序, 不同的是wrap不返回协同本身, 而是返回一个函数, 这个函数被调用是将resume协同
* 当一个协同正在运行时, 不能在外部终止他, 只能通过显示的调用yield挂起他的执行.

== 第10章 完整示例 ==

== 第11章 数据结构 ==
* 由于Lua中table是对象, 所以每一行我们必须显式地创建一个table, 这点在多维数组中尤为注意.
* 矩阵中, 如果索引是字符串, 可以用一个单字符将两个字符串索引连接起来构成一个单一的索引下表, 例如矩阵m,索引下表s,t, 假定s和t都不含冒号, 则
    - 代码为 m[s..':'t], 也可以用控制字符连接两个索引字符串, 例如'\0'
* 对于稀疏矩阵, 不需担心, lua的table实现的数据本身就具有稀疏的特性
* table实现链表很简单, 指针指示表的一个域, 指向下一个节点
* 实现队列, 用两个索引下表, 一个表示第一个元素, 另一个表示最后一个元素
    - 见队列的实现List.popright, List.popleft, List.pushleft, List.pushright
* 集合和包, Lua中表示集合有个简单有效的方法, 将所有集合中的元素作为下标存放在一个table
* Lua使用真正的垃圾收集算法, 当他发现程序使用太多的内存就会遍历他所有的数据结构去释放垃圾内存    
* io.read(*all)可以很快的读取整个文件进入内存, 而不会产生大量的垃圾内存影响速度
* table的concat函数接受第二个可选的参数, 代表插入的字符串之间的分隔符.

== 第12章 数据文件与持久化 ==
* 文件格式可以通过使用Lua中的table构造器来描述. 我们只需要在写数据的稍微做一些额外的工作.
    - 见例子中Entry处理函数的代码
* string 标准库提供了格式化函数专门提供"%q"选项, 可以使用双引号表示字符串并且可以正确处理包含引号和换行等特殊字符的字符串
{{{ 
    function serialize (0)
        if type(0) == "number" then
            io.write(0)
        elseif type(0) = "string" then
            io.write(string.format("%q"), o)
        else...
        end
    end
}}}
* 表的保存, 关键字可以加上[]
{{{ 
    elseif type(0) == "table" then
        io.write("{\n")
        for k,v in pairs(o) do
            io.write(" \")
            serialize(k)
            io.write("] = ")
            serialize(v)
            io.write(",\n")
        end
        io.write("}\n")
}}}

== 第13章 Metatables and Metamethods ==
* 我们不可以对两个table执行加操作, 也不可以比较两个表的大小
* Metatables允许我们改变table的行为, 例如, 使用Metatables我们可以定义Lua如何计算两个table的相加操作a+b
    - 当Lua试图对两个表进行相加时, 检查两个表是否有一个表有Metatable, 并检查Metatable是否有__add域, 如果找到则调用这个__add函数去计算结果
* Lua中的每一个表都有其Metatable, Lua默认创建一个不带metatable的新表
{{{ 
    t = {}
    print(getmetatable(t))        -->nil
}}}
    - 可以使用setmetatable函数设置或改变一个表的metatable
{{{ 
    t1 = {}
    setmetatable(t, t1)
    assert(getmetatable(t) == t1)
}}}
    - 任何一个表都可以是其他一个表的metatable, 一组相关的表可以共享一个metatable, 一个表也可以是自身的metatable
* 使用metamethod的原则: 如果第一个参数存在带有__add域的metaable, Lua使用它作为metamethod, 和第二个参数无关
    - 否则第二个参数存在带有__add域的metaable, Lua使用它作为metamethod, 否则报错.
* 允许使用的关系运算Metamethods: __eq(等于), __lt(小于), __le(小于等于)
    - 用 a~=b 转换为 not(a==b), a > b 转换为 b < a, a >= b 转换为 b <= a
    - 关系运算不支持混合运算, 如比较一个字符串和一个数字, 将抛出错误, 但相等比较不会抛出错误.
    - 如果两个对象有不同的metamethod, 比较的结果为false    
* print函数总是调用tostring来格式化它的输出, 格式化一个对象时, 首先检查是否有带__tostring域的metatable.
    - 如果存在, 则以对象作为参数调用对应的函数来完成格式化, 返回的结果即为tostring的结果.
* 如果你设置了__metatable的值, getmetatable将返回这个域的值, 而调用setmetatable则会出错
* 访问一个表的域, 会触发lua解释器查找__index metamethod, 如不存在, 返回nil, 如存在则返回结果
* 实现继承, 如果一个窗口的各个属性都有默认值, 我们需创建新窗口, 用非默认值的例子:
    - __index 可以是函数, 也可以是一个表, 为函数时将table和缺少的域作为参数调用该函数.
    - 为表时, 查看表中是否有缺少的域
    - 使用表则可以简单的实现单继承, 使用函数可以实现多继承, 隐藏, 以及其他的机制.
    - 还可以使用rawget函数访问表
* __newindex 用来对表更新, 如果你给表的一个缺少的域进行赋值, 解释器会查找__newindex, 如果存在这个函数就不进行赋值操作.
    - raw函数可以绕过metamethod, 调用rawset(t, k, v)不调用任何metamethod对表t的k域赋值为v.
* 为每个表设置缺省值, 且缺省值可以不同, 这个缺省值保存在表自身, 用"___"域, 这个域名可以自己取
{{{ 
    local mt = {__index = function(t) return t.___ end}
    function setDefault (t, d)
        t.___ = d
        setmetatable(t, mt)
    end
}}}
    - 也可以创建新表用作键值, 用于保证特殊键值的唯一性
{{{ 
    local key = {}
    local mt = {__index = function (t) return t[key] end}

    function setDefault(t, d)
        t[key] = d
        setmetatable(t, mt)
    end    
}}}
* 监控一个表的所有访问, 可以为真实的表创建一个代理, 这个代理是一个空表, 并且带有__index和__newindex,
    - 由这两个方法跟踪表的所有访问情况, 并将其指向原始的表
    - 如果监控多张表, 不需要为每张表都建立一个不同的metatable, 只需要将每一个proxy和他原始的表关联, 所有的proxy共享一个公用的metatable.
    - 将表和对应的proxy关联的一个简单方法是将原始的表作为proxy的域, 只要我们保证这个域不用做其他用途, 为了保证这点, 创建一个私有的没有他人可以访问的key
        - --实现代理, 监控多个表
{{{ 
        local index = {}
        local mt = {
            __index = function (t, k)
                print("*access to element " .. tostring(k))
                return t[index][k]
            end
            __newindex = function (t, k, v)
                print("*update of element " .. tostring(k) .. " to "
                    .. tostring(v))
                    t[index][k] = v
            end
        }

        function track (t)
            local proxy = {}
            proxy[index] = t
            setmetatable(proxy, mt)
            return proxy
        end
}}}
    - 监控一个表, 仅仅需要 t=track(t) 即可
* 只读表, 访问一个表, 首先访问代理, 由于代理不存在关键值, 所以访问__index, 而后就可以直接访问该表,
    - 如修改某关键值, 由于关键值不存在, 所以会被__newindex拦截下来报错, 这样就可以实现只读表.
