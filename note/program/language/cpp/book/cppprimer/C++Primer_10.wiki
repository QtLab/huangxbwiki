* pair类型, 在 utility 头文件中定义, pair类型提供的操作:
	- pair<T1, T2> p1;
	- pari<T1, T2> p1(v1, v2);
	- make_pair(v1, v2);
	- p1 < p2
	- p1 == p2
	- p.first
	- p.second
* 关联容器不提供 front, push_front, pop_front, back, push_back, pop_back操作
* 在实际使用中, map的键类型必须定义 < 操作符, map的构造函数:
	- map<k, v> m;
	- map<k, v> m(m2);
	- map<k, v> m(b, e); --- 其中元素的类型必须能转换为 pair<const k, v>
* map<K, V>::value_type为pair类型, 其中键为 const.  map<K, V>::key_type --- 用作索引的键类型; map<K, V>::mapped_type --- 键所关联的值的类型; 所以 map<K, V>为 pair<const map<K, V>::key_type, map<K, V>::mapped_type >.
* map 迭代器解引用产生 pair类型 对象
{{{c++
map<string, int>::iterator map_it = word_count.begin();
cout << map_it->first;
cout << " " << map_it->second;
}}}
* map的下标操作符, 如果该键已存在, 则返回其所关联的值, 否则为改键创建一个新的元素, 并插入到此map对象中. 
* map容器提供的insert操作
	- m.insert(e) --- e 为 value_type类型的值, 如 e.first不在m中, 则插入新值, 否则m不变
	- m.insert(beg, end)
	- m.insert(iter, e) --- 以iter为起点搜索新元素存储的位置.
* 可以使用 make_pair 和 typedef 简化插入的实参. 返回值为pair类型, 包含一个迭代器和bool值, 迭代器指向插入的位置, bool表示受否插入该元素
* map提供了函数 count()和find()用于查看某键值是否存在而不会插入该键值.
* 从map中删除对象: m.erase(k), m.erase(p), m.erase(b, e);
* set不支持下标操作, 没有定义 mapped_type 类型, 存储的元素仅仅是键, 没有所关联的值.
* set 使用 insert() 成员函数添加元素, 返回 pair类型的值, 第一个为指向插入元素的迭代器, 第二个为是否成功插入. 可使用 find() 成员函数查找元素, 使用 count() 判断元素是否存在. 
* multimap 不支持下标运算, insert() 和 erase() 操作同样适用于 multimap 以及 multiset容器. multimap中的erase() 函数, 如果只有一个参数, 则删除所有该参数为键值的元素, 并返回删除元素的个数
* 如何在 multimap和 multiset中查找元素: (1) 使用 find 和 count 操作; (2) lower_bound 和 upper_bound 函数, 以及 equal_range 函数
	* lower_bound(k): 返回一个迭代器, 指向键不小于k的第一个元素
	* upper_bound(k): 返回一个迭代器, 指向键大于k的第一个元素, 如元素不存在, 和上面的操作返回同一个迭代器, 指向该元素应当插入的位置.
	* equal_range(k): 返回一个迭代器的pair对象, 成员为上面两个操作的结果
