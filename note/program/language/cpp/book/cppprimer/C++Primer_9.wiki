第9章 顺序容器
* 顺序容器类型
| 顺序容器       |                    |
|----------------|--------------------|
| vector         | 快速随机访问       |
| list           | 快速插入删除       |
| deque          | 双端队列           |
* 顺序容器适配器
| 顺序容器适配器 |                    |
|----------------|--------------------|
| stack          | 后进先出           |
| queue          | 先进先出           |
| priority_queue | 有优先级管理的队列 |
* 容器的元素使用默认构造函数初始化能达到最佳运行时性能, 并且使容器更容易使用.
| 容器构造函数 |                                                    |
|--------------|----------------------------------------------------|
| C<T> c;      | 创建一个名为c的空容器                              |
| C c(c2)      | c2的副本, 相同容器类型, 相同容器元素               |
| C c(b, e)    | 使用迭代式初始化                                   |
| C c(n, t)    | n个值为t的元素初始化容器                           |
| C c(n)       | 只适用于顺序容器, 创建 n个值默认构造函数初始化的值 |
* 可以用作容器元素类型的类型必须满足两个条件: (1) 元素类型必须支持赋值运算;  (2) 元素类型的对象必须可以复制. 所以除了引用类型, 所有内置或复合类型都可以作为元素类型. 没有元素是引用类型的元素; 除了输入输出(IO)标准库类型, auto_ptr类型, 所有标准库类型都是有效的容器元素类型. 
* 可以定义元素是容器类型的元素
{{{c++
vector< vector<string> > lines;
}}}
* 常用迭代器运算
| 常用迭代器运算 | vector和 deque类型迭代器支持的操作 |
|----------------|------------------------------------|
| *iter          | iter + n                           |
| iter->         | iter - n                           |
| ++iter         | iter1 += iter2                     |
| --iter         | iter1 -= iter2                     |
| iter++         | iter1 - iter2                      |
| iter--         | > >= < <=                          |
| iter1 == iter2 |                                    |
| iter1 != iter2 |                                    |
* 容器定义的类型别名
| 容器定义的类型别名     |                                          |
|------------------------|------------------------------------------|
| size_type              |                                          |
| iterator               |                                          |
| const_iterator         |                                          |
| reverse_iterator       |                                          |
| const_reverse_iterator |                                          |
| difference_type        | 存储两个迭代器差值的有符号整型, 可为复数 |
| value_type             | 元素的类型                               |
| referece               | 元素的左值类型, 是 value_type& 的同义词  |
| const_reference        | 等同于 const value_type&                 |
* value_type, referece, const_reference 三种类型使程序员无须直接知道容器元素的真正类型, 就能使用它.
* 所有顺序元素支持 push_back() 操作. list 和 deque 支持 push_front() 操作. insert() 则在指定位置添加元素.任何 insert() 和 push() 操作都可能导致迭代器失败. 不要存储 end操作返回的迭代器. 添加或删除元素都会导致其失效. 可以每次插入之后重新进行 end() 计算.
{{{c++
// last = v.end(); while(first != last); 则是错误的用法
while(first != v.end())
{
	first = v.insert(first, 42);
	++first;
}
}}}
* 所有的容器类型都支持用关系操作符来实现两个容器的比较. 比较的容器必须具有相同的容器类型和元素类型.
* 顺序容器的大小操作
| 顺序容器的大小操作 |                                                                                 |
|--------------------|---------------------------------------------------------------------------------|
| c.size()           | c中的元素个数                                                                   |
| c.max_size()       | c中最多可容纳的元素个数                                                         |
| c.empty()          |                                                                                 |
| c.resize(n)        | 调整容器c的长度大小, 如n<c.size(), 删除多余元素. 否则用默认构造函数初始化新的值 |
| c.resize(n, t)     | 同上, 如果 n > c.size(), 则用t初始化多余的值                                    |
* 如果容器非空, 那么可使用 front()和back()成员访问容器第一个和最后一个元素. 在 vector 和 deque中, 可用c[n]或c.at(n) 访问元素. 两个函数的区别就是 at() 访问越界元素会抛出 out_of_range 异常.
* 删除顺序容器内元素的操作
| 删除顺序容器内元素的操作 |                                                     |
|--------------------------|-----------------------------------------------------|
| c,erase(P)               | 删除迭代器p所指向元素, 返回被删除元素后元素的迭代器 |
| c.erase(b, e)            | 删除一个区间                                        |
| c.clear()                | 删除所有元素, 返回 void                             |
| c.pop_back()             | 删除最后一个元素, 返回void                          |
| c.pop_front()            | 删除第一个元素, 返回void, 只适用于 list 和 deque    |
* 容器的赋值操作符通常都是删除左操作数的所有元素---erase(), 而后插入右操作数的所有元素---insert().
{{{c++
c1 = c2;
// 等效于
c1.erase(c1.begin(), c1.end());
c1.insert(c2.begin(), c2.end());
}}}
* 赋值和assign操作使左操作数容器的所有迭代器失效, swap操作则不会使迭代器失效, swap操作保证在常量时间内完成, 不会删除和插入任何元素, 所以迭代器不会失效. 但是该迭代器指向交换后的另一个容器, 即原来指向的元素所在的容器.
| 顺序容器的赋值操作 |                                                              |
|--------------------|--------------------------------------------------------------|
| c1 = c2            | 容器类型和元素类型必须相同                                   |
| c1.swap(c2)        | 容器类型和元素类型必须相同, 速度比将c2的元素复制到c1的操作快 |
| c.assign(b, e)     | b, e必须不是指向c中元素的迭代器                              |
| c.assign(n, t)     |                                                              |
* vector 容器的两个成员函数: capacity 和 reserve. 前者用于告知在分配更多存储空间时, 该容器当前的存储空间. 后者用于告知应预留多少元素的存储空间
* string 类型与 vector 类型不同的是, 它不支持以栈方式操纵容器, 在 string 类型中不能使用 front, back 和 pop_back()操作.
| 构造string对象的其他方法 |                                          |
|--------------------------|------------------------------------------|
| string s(cp, n)          | cp所指数组的前n个元素的副本              |
| string s(s2, pos2)       |                                          |
| string s(s2, pos2, len2) |                                          |

| 与容器共有的string操作 |                                          |
|------------------------+------------------------------------------|
| s.insert(p, t)         |                                          |
| s.insert(p, n, t)      |                                          |
| s.insert(p, b, e)      |                                          |
| s.assign(b, e)         | 用迭代器b, e范围之内的元素替换s, 并返回s |
| s.assign(n, t)         |                                          |
| s.erase(p)             |                                          |
| s.erase(b, e)          |                                          |

| string特有的操作       |                              |
|------------------------|------------------------------|
| s.insert(pos, n, c)    |                              |
| s.insert(pos, s2)      |                              |
| s.inserr(pos, cp, len) | cp为字符串数组               |
| s.insert(pos, cp)      | cp为以空字符结束的字符串数组 |
| s.assign(s2)           |                              |
| s.assign(s2, pos, n)   |                              |
| s.assign(cp, n)        |                              |
| s.assign(cp)           |                              |
| s.erase(pos, len)      |                              |
* 只适用于 string 的操作, substr(), append(), replace(), find(); 其中 replace() 不要求删除的文本长度和插入的相同. find() 函数返回 string::size_type类型的值, 以下标形式标记查找匹配所发生的位置, 或返回 string::npos; 有 find(), find_first_of, find_first_not_of, rfind, find_last; 还有 compare() 函数用于比较, 类似于 strcmp.
* 容器适配器: queue, priority, queue, stack; 适配器是使一种事物的行为类似于另一事物的行为的一种机制. 例如 stack适配器使任何一种顺序容器以栈的方式使用.
| 适配器通用的操作和类型 |                      |
|------------------------|----------------------|
| size_type              |                      |
| value_type             |                      |
| container_type         | 基础容器的类型       |
| A a;                   | 创建一个新的适配器   |
| A a(c)                 | 适配器a为容器c的副本 |
| 关系操作符             | ==, !=, <, <=, >, >= |
* 默认的 stack 和 queue 都基于 deque容器实现, priority_queue 则在 vector 容器上实现, 可通过将一个顺序容器指定为适配器的第二类型参数覆盖默认关联类型, stack类适配器关联类型可以是任意一种顺序容器类型, queue 要求有 push_front, 所以只能是deque, list; priority_queue要求能随机访问, 所以只能是vector, deque;
{{{c++
stack<string, vector<string> > str_stk;
}}}
* 栈适配器支持的操作
| 栈适配器支持的操作 |   |
|--------------------|---|
| s.empty()          |   |
| s.size()           |   |
| s.pop()            |   |
| s.top()            |   |
| s.push(item)       |   |
* 队列和优先级队列支持的操作
| 队列和优先级队列支持的操作 |   |
|----------------------------+---|
| q.empty()                  |   |
| q.size()                   |   |
| q.pop()                    |   |
| q.front()                  |   |
| q.back()                   |   |
| q.top()                    |   |
| q.push(item)               |   |9章 顺序容器
* 顺序容器类型
| 顺序容器       |                    |
|----------------|--------------------|
| vector         | 快速随机访问       |
| list           | 快速插入删除       |
| deque          | 双端队列           |
* 顺序容器适配器
| 顺序容器适配器 |                    |
|----------------|--------------------|
| stack          | 后进先出           |
| queue          | 先进先出           |
| priority_queue | 有优先级管理的队列 |
* 容器的元素使用默认构造函数初始化能达到最佳运行时性能, 并且使容器更容易使用.
| 容器构造函数 |                                                    |
|--------------|----------------------------------------------------|
| C<T> c;      | 创建一个名为c的空容器                              |
| C c(c2)      | c2的副本, 相同容器类型, 相同容器元素               |
| C c(b, e)    | 使用迭代式初始化                                   |
| C c(n, t)    | n个值为t的元素初始化容器                           |
| C c(n)       | 只适用于顺序容器, 创建 n个值默认构造函数初始化的值 |
* 可以用作容器元素类型的类型必须满足两个条件: (1) 元素类型必须支持赋值运算;  (2) 元素类型的对象必须可以复制. 所以除了引用类型, 所有内置或复合类型都可以作为元素类型. 没有元素是引用类型的元素; 除了输入输出(IO)标准库类型, auto_ptr类型, 所有标准库类型都是有效的容器元素类型. 
* 可以定义元素是容器类型的元素
{{{c++
vector< vector<string> > lines;
}}}
* 常用迭代器运算
| 常用迭代器运算 | vector和 deque类型迭代器支持的操作 |
|----------------|------------------------------------|
| *iter          | iter + n                           |
| iter->         | iter - n                           |
| ++iter         | iter1 += iter2                     |
| --iter         | iter1 -= iter2                     |
| iter++         | iter1 - iter2                      |
| iter--         | > >= < <=                          |
| iter1 == iter2 |                                    |
| iter1 != iter2 |                                    |
* 容器定义的类型别名
| 容器定义的类型别名     |                                          |
|------------------------|------------------------------------------|
| size_type              |                                          |
| iterator               |                                          |
| const_iterator         |                                          |
| reverse_iterator       |                                          |
| const_reverse_iterator |                                          |
| difference_type        | 存储两个迭代器差值的有符号整型, 可为复数 |
| value_type             | 元素的类型                               |
| referece               | 元素的左值类型, 是 value_type& 的同义词  |
| const_reference        | 等同于 const value_type&                 |
* value_type, referece, const_reference 三种类型使程序员无须直接知道容器元素的真正类型, 就能使用它.
* 所有顺序元素支持 push_back() 操作. list 和 deque 支持 push_front() 操作. insert() 则在指定位置添加元素.任何 insert() 和 push() 操作都可能导致迭代器失败. 不要存储 end操作返回的迭代器. 添加或删除元素都会导致其失效. 可以每次插入之后重新进行 end() 计算.
{{{c++
// last = v.end(); while(first != last); 则是错误的用法
while(first != v.end())
{
	first = v.insert(first, 42);
	++first;
}
}}}
* 所有的容器类型都支持用关系操作符来实现两个容器的比较. 比较的容器必须具有相同的容器类型和元素类型.
* 顺序容器的大小操作
| 顺序容器的大小操作 |                                                                                 |
|--------------------|---------------------------------------------------------------------------------|
| c.size()           | c中的元素个数                                                                   |
| c.max_size()       | c中最多可容纳的元素个数                                                         |
| c.empty()          |                                                                                 |
| c.resize(n)        | 调整容器c的长度大小, 如n<c.size(), 删除多余元素. 否则用默认构造函数初始化新的值 |
| c.resize(n, t)     | 同上, 如果 n > c.size(), 则用t初始化多余的值                                    |
* 如果容器非空, 那么可使用 front()和back()成员访问容器第一个和最后一个元素. 在 vector 和 deque中, 可用c[n]或c.at(n) 访问元素. 两个函数的区别就是 at() 访问越界元素会抛出 out_of_range 异常.
* 删除顺序容器内元素的操作
| 删除顺序容器内元素的操作 |                                                     |
|--------------------------|-----------------------------------------------------|
| c,erase(P)               | 删除迭代器p所指向元素, 返回被删除元素后元素的迭代器 |
| c.erase(b, e)            | 删除一个区间                                        |
| c.clear()                | 删除所有元素, 返回 void                             |
| c.pop_back()             | 删除最后一个元素, 返回void                          |
| c.pop_front()            | 删除第一个元素, 返回void, 只适用于 list 和 deque    |
* 容器的赋值操作符通常都是删除左操作数的所有元素---erase(), 而后插入右操作数的所有元素---insert().
{{{c++
c1 = c2;
// 等效于
c1.erase(c1.begin(), c1.end());
c1.insert(c2.begin(), c2.end());
}}}
* 赋值和assign操作使左操作数容器的所有迭代器失效, swap操作则不会使迭代器失效, swap操作保证在常量时间内完成, 不会删除和插入任何元素, 所以迭代器不会失效. 但是该迭代器指向交换后的另一个容器, 即原来指向的元素所在的容器.
| 顺序容器的赋值操作 |                                                              |
|--------------------|--------------------------------------------------------------|
| c1 = c2            | 容器类型和元素类型必须相同                                   |
| c1.swap(c2)        | 容器类型和元素类型必须相同, 速度比将c2的元素复制到c1的操作快 |
| c.assign(b, e)     | b, e必须不是指向c中元素的迭代器                              |
| c.assign(n, t)     |                                                              |
* vector 容器的两个成员函数: capacity 和 reserve. 前者用于告知在分配更多存储空间时, 该容器当前的存储空间. 后者用于告知应预留多少元素的存储空间
* string 类型与 vector 类型不同的是, 它不支持以栈方式操纵容器, 在 string 类型中不能使用 front, back 和 pop_back()操作.
| 构造string对象的其他方法 |                                          |
|--------------------------|------------------------------------------|
| string s(cp, n)          | cp所指数组的前n个元素的副本              |
| string s(s2, pos2)       |                                          |
| string s(s2, pos2, len2) |                                          |

| 与容器共有的string操作 |                                          |
|------------------------+------------------------------------------|
| s.insert(p, t)         |                                          |
| s.insert(p, n, t)      |                                          |
| s.insert(p, b, e)      |                                          |
| s.assign(b, e)         | 用迭代器b, e范围之内的元素替换s, 并返回s |
| s.assign(n, t)         |                                          |
| s.erase(p)             |                                          |
| s.erase(b, e)          |                                          |

| string特有的操作       |                              |
|------------------------|------------------------------|
| s.insert(pos, n, c)    |                              |
| s.insert(pos, s2)      |                              |
| s.inserr(pos, cp, len) | cp为字符串数组               |
| s.insert(pos, cp)      | cp为以空字符结束的字符串数组 |
| s.assign(s2)           |                              |
| s.assign(s2, pos, n)   |                              |
| s.assign(cp, n)        |                              |
| s.assign(cp)           |                              |
| s.erase(pos, len)      |                              |
* 只适用于 string 的操作, substr(), append(), replace(), find(); 其中 replace() 不要求删除的文本长度和插入的相同. find() 函数返回 string::size_type类型的值, 以下标形式标记查找匹配所发生的位置, 或返回 string::npos; 有 find(), find_first_of, find_first_not_of, rfind, find_last; 还有 compare() 函数用于比较, 类似于 strcmp.
* 容器适配器: queue, priority, queue, stack; 适配器是使一种事物的行为类似于另一事物的行为的一种机制. 例如 stack适配器使任何一种顺序容器以栈的方式使用.
| 适配器通用的操作和类型 |                      |
|------------------------|----------------------|
| size_type              |                      |
| value_type             |                      |
| container_type         | 基础容器的类型       |
| A a;                   | 创建一个新的适配器   |
| A a(c)                 | 适配器a为容器c的副本 |
| 关系操作符             | ==, !=, <, <=, >, >= |
* 默认的 stack 和 queue 都基于 deque容器实现, priority_queue 则在 vector 容器上实现, 可通过将一个顺序容器指定为适配器的第二类型参数覆盖默认关联类型, stack类适配器关联类型可以是任意一种顺序容器类型, queue 要求有 push_front, 所以只能是deque, list; priority_queue要求能随机访问, 所以只能是vector, deque;
{{{c++
stack<string, vector<string> > str_stk;
}}}
* 栈适配器支持的操作
| 栈适配器支持的操作 |   |
|--------------------|---|
| s.empty()          |   |
| s.size()           |   |
| s.pop()            |   |
| s.top()            |   |
| s.push(item)       |   |
* 队列和优先级队列支持的操作
| 队列和优先级队列支持的操作 |   |
|----------------------------+---|
| q.empty()                  |   |
| q.size()                   |   |
| q.pop()                    |   |
| q.front()                  |   |
| q.back()                   |   |
| q.top()                    |   |
| q.push(item)               |   |
