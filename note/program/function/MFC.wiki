= 控件 =
	* CAnimateCtrl	--- 播放AVI, open方法和animate方法
	* CStatusBar --- 状态栏
		* 一行用于文字输出的面板.
		* 其实现是用 CStatusBarCtrl. 
		* CStatusBar 的方法提供了大部分功能, 但 CStatusBar::GetStatusBarCtrl() 则允许实现更多的功能.
		* 大部分状态栏显示 CAPS_LOCK, NUM_LOCK 信息.
		* MFC默认情况下并不允许CStatusBar面板进行操作, 如果要激活该面板, 则在状态栏的每个面板上使用 ON_UPDATE_COMMAND_UI 宏, 而后更新这些面板
		* 创建一个面板
			# 定义面板的Command ID. 资源符号-->新建-->输入ID-->指定值
			# 定义用于显示于面板的字符串, String Table-->新字符串-->选择Command ID-->输入字符串
			# 添加 indicators 数组, 存储命令ID
		* 建议使用类CCmdUI的SetText方法来设置面板的字符串, 在更新处理函数调用该方法.
		* 如何更新一个面板的文字字符串
			# 添加一个用于该命令的命令更新处理函数 
				* 手工添加该处理函数的原型: afx_msg void OnUpdatePage(CCmdUI *pCmdUI);
				* 在 cpp 文件中, 添加该处理函数的定义. 例如
{{{c++
void CMainFrame::OnUpdatePage(CCmdUI *pCmdUI)
{
    pCmdUI->Enable(); 
    CString strPage;
    strPage.Format(_T("Page %d"), m_nPage); 
    pCmdUI->SetText(strPage); 
}
}}}
				* 在message map中, 添加一个 ON_UPDATE_COMMAND_UI宏. 例如: ON_UPDATE_COMMAND_UI(ID_INDICATOR_PAGE, &CMainFrame::OnUpdatePage)
		* 创建状态栏
			* 构建一个CStatusBar 对象
			* 调用 Create(CreateEx)函数创建
			* 调用 SetIndicator 关联indicator ID
		* 三种方法更新其面板文字;  CWnd::SetWindowText, CCmdUI::SetText (ON_UPDATE_COMMAND_UI), SetPaneText
		* SetPaneStyle 更新字体
		* 可以使用  CStatusBar::GetStatusBarCtrl() 调用方法 SetMinHeight
		* 设置该状态栏新的ID, 风格, 和宽度
		* GetItemRect() 可以获取矩形信息
	* CToolBar
		* SetButtons --- 将工具条按钮的命令ID设置为参数数组里面的值
		* SetButtonText --- 设置工具条按钮上的文本值
		* SetButtonStyle --- 设置按钮风格. TBBS_BUTTON, TBS_SEPARATOR(分隔条), TBBS_CHECKBOX, TBBS_GROUP, TBBS_CHECKGROUP, TBBS_DROPDOWN, TBBS_AUTOSIZE, TBBS_NOPREFIX, BTNS_DROPDOWN
		* GetToolBarCtrl --- 获取 CToolBarCtrl
		* GetItemRect --- 得到某特定项的矩形
		* SetButtonInfo --- 设置该位置按钮的资源ID, 风格, 图像索引
		* SetButtonText --- 设置按钮的文本
	
	* CToolBarCtrl
		* GetButtonCount --- 得到工具条按钮数目
		* SetBitmapSize --- 设置图标大小
		* SetButtonSize --- 设置按钮大小
		* SetImageList --- 设置其图标列表
		* GetItemRect --- 得到某个按钮的矩形
		* SetExtendStyle --- 可以设置额外风格, 比如下拉菜单
		* AddButtons, DeleteButtons --- 添加和删除按钮
		* AutoSize --- 重置整个工具条, 当父窗口大小变化时或者工具条大小变化时要调用该函数(例如设置按钮和位图大小, 或添加字符串)

	* CListCtrl - 包装"列表视图控件"的功能, 显示一系列项目的集合, 每个项目包含一个图标和一个标签
		* 列表视图控件的包装类, 显示一系列包含图标和标签的项目
		* 四种显示该控件的方式: Icon View(32x32的大图标以及下面的标签); Small icon view(16x16的小图标以及右边的标签); List View(列表方式显示图标和标签); Report View(每项显示于一行, 额外的信息显示于右边), 包含额外的包装头控件(CHeadCtrl)
		* 扩展风格: Hover selection, Virtual list views, One- and two- click activation, Drag and drop column ordering	
		* 用于插入, 删除, 查找, 修改项目的函数; CListCtrl::GetItem, CListCtrl::InsertItem, CListCtrl::FindItem 等
		* 支持 callback items, 用于存储项目的图标, 文本
		* 四种不同的图像列表: Large icon, Samll icon, Application-defined state, Header item

= 系统 =
	* CTime --- 表示绝对时间和日期
		* GetCurrentTime --- 返回当前时间的 CTime
		* FOrmat --- 格式化而后返回 CString
	* 定时器, SetTimer 和 KillTimer 为设置定时器和取消定时器的函数
	* CMenu: 控制菜单
		* AppenMenu
		* Attach --- 将一个系统菜单句柄挂接至CMenu对象
		* GetMenuItemCount --- 得到菜单一层的菜单项个数
		* GetMenuString --- 得到字符串
		* GetMenuItemID --- 得到ID, -1 表示弹出菜单, 0 表示分隔条
		* ModifyMenu --- 修改菜单, 比如改成自绘菜单
		* Detach, DestroyMenu --- 销毁一个菜单
		* TrackPopupMenu --- 右键弹出菜单
	
= 窗口 =	
	* CWnd --- 窗口类
		* GetSystemMenu --- 获取系统菜单
		* OnSysCommand --- 处理系统菜单
		* GetClientRect
		* ShowWindow --- SW_SHOW 显示, SW_RESTORE 还原
		* RedrawWindow --- 重绘给定窗口的区域
		* GetWindowRect --- 得到窗口在桌面的位置矩形信息
	* CFrameWnd
		* FloatControlBar --- 设置浮动控制条(工具栏)
	* CDC
		* FromHandle  --- 根据窗口句柄的到他的DC
		* SetBkMode --- 设置背景模式, 透明和非透明
		* Rectangle --- 绘制矩形
		* SelectStockObject --- 选择存储对象
		* FillSolidRect --- 用颜色填充矩形
		* Draw3dRect --- 绘制3D矩形
		* SelectObject --- 选择对象
		* MoveTo
		* LineTo
		* CreateCompatibleDC --- 一般用于创建内存CDC
		* StretchBlt --- CDC之间的操作
	* CBitmap
		* LoadBitmap --- 加载一个位图
		* GetBitmap --- 得到位图信息(如高宽)
		* DeleteObject
	* CFont
		* CreateFont --- 可以设置字体旋转, 加粗, 大小, 下划线, 删除线 斜体, 何种字体等等
	* CReBar --- 可以自定义工具栏, 编辑框, 列表框等信息. 一个rebar可包含多个bands, 每个bands可包含一个grippe bar, 位图, 文本标签, 子窗口等, 注意 bands 不能有多个子窗口
		* Create 创建
		* RedrawWindow 重绘
	* CReBarCtrl --- 包装一个rebar控件的功能
		* 使用REBARBANDINFO 设置band信息
		* SetBandInfo 设置属性
		
= 元素 =
	* CImageList --- 用于图像列表
		* Create
		* Add
		* DeleteImageList
		* Draw 在某处绘制
	* CString
		* 得到内部字符串的指针, 返回LPSTR, 也就是CHAR*
	* CRect
		* DeflateRect
		* PtInRect --- 判断点是否在矩形中

= 全局方法 =
	* GetRValue -- 得到COLORREF中的红色成分值
	* AfxGetMainWnd() --- 得到MFC的主窗口

= 宏 =
	* COLORREF --- 表示颜色, 实质为DWORD, 使用 RGB(r,g,b) 可以直接返回一个DWORD
	* MAKERESOURCE --- 将一个整数资源ID转换成字符串ID, 用于那些允许参数为该宏返回值的函数. 例如参数类型为 lpType 或者 lpName 的函数
