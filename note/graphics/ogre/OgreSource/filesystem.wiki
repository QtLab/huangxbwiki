一. 配置文件
	* 配置文件是以 key/value 形式保存的文件
	* Ogre的Demo中有如下配置文件:
		* ogre.cfg --- Render System的设置
		* plugins.cfg --- 插件目录及插件名称
		* resources.cfg --- 资源文件的位置
		* terrain.cfg --- 地形配置文件
		* media.cfg --- 媒体文件 (如 mesh, 图片等)
		* quake3settings.cfg 
	* 有效的 Ogre 配置文件的要求
		* 一个 key 对应一个 value
		* key 和 value 之间的分界符可以是 Tab, 冒号, 等号
		* 可分成段, 段名在中括号内 [SectionName]
		* value后必须有回车符
		* 可有注释, 用 # 或 @ 开头的行
	* Ogre::ConfigFile
		* Ogre有一Iterator模板 Ogre::MapIterator<T> 
			SettingsMultiMap, SettingsIterator, SettingsBySection, SectionIterator
二. 文件容器和文件管理
	* Ogre 文件系统的核心是 Archive 和 DataStream, Archive泛指文件容器, 可是文件夹, 也可使压缩包. DataStream 功能同 std::basic_istream, 读取文件
		* Archive
			* 统一的接口(抽象基类)Ogre::Archive, 具体的实现方法分别由 Ogre::FileSystemArchive 和 Ogre::ZipArchive 完成 
			* 采用抽象工厂模式实例化 Archive, FactorObj<Archive> --> ArchiveFactor --> (FileSystemArchiveFactory, ZipArchiveFactory)
			* Archive 管理类 Ogre::ArchiveManager, 所有的ArchiveFactory都必须注册到ArchiveManager
		* Data Stream
			* 基类 Ogre::DataStream, 其派生类 FileHandleDataStream, FileStreamDataStream, MemoryDataStream, ZipDataStream
			* MemoryDataStream --- 内存区域, unsigned char内存, 由 '\n' 形成行. 
			* ZipDataStream --- 用 zlib 实现读取压缩文件, 对 zlib 包装, 使其能符合 DataStream 接口
			* FileHandleDataStream, FileStreamDataStream 为C语言的FILE和C++ stream的适配
三. 资源管理
	* 资源
	* 资源管理, 每一种 Resource, 提供了相应的 ResourceManager, 具体的ResourceManager 负责管理对应的资源池, 并可以索引资源, 查找资源, 加载销毁资源
	* ResourceManager 维护了一个 Resource 的hash表用以资源的快速查找
	* Resource 利用 ResourceManger 来通知资源的加载情况, ResourceManger 利用 Resource 加载具体的资源
	* Resource 使用桥接模式使用不同的加载方式
	* 资源组的管理, ResourceGroupManager
		* 资源的加载顺序: ResourceGroupManager::addResource, ResourceGroupManager::initialiseResourceGroup, ResourceGroupManager::loadResourceGroup
		* ResourceGroupListener 用于监控资源的加载进度, ResourceGourpManger 维护了一个 ResourceGroupListener 的列表
		* 加载之前, ResourceGroupManager 向各 Listeners 发送 resourceLoadStarted 消息, 完成后发送 resourceLoadEnd 消息
	* 多线程下的资源管理, Ogre::ResourceBackgroundQueue, 用于资源的加载和卸载, 后台监听器 ResourceBackgroundQueueListener
四. Scripts
	* 分类: Material Scripts, Particle Scripts, Overlay Scripts, Font Definition Scripts
	* ScriptLoader 用于加载脚本
五. 序列化
	* 对于二进制文件的读写, 提供了专门的序列化类 --- Ogre::Serializer, 此类文件主要有 .mesh 和 .skeleton
	* Material, Ogre 看成脚本资源, 用 Ogre::MaterialSerializer
六. log 管理
	* Ogre::Log --- 负责文件的读写, Ogre::LogManager --- 管理, 维护 log 的表和 LogListener的表, Ogre::LogListener --- 用于 Log 输出的重定向
