* loadResources() 介绍了如何遍历已初始化的资源组中的一个资源路径, 并创建一个资源组
	* ResourceGroupManager::getResourceGroups()
	* ResourceGroupManager::getResourceLocations()
	* ResourceLocation::archive 数据成员
	* Archive::getName()
	* ResourceGroupManager::createResourceGroup()
	* ResourceGroupManager::addResourceLocation()
	* ResourceGroupManager::initialiseResourceGroup()
	* ResourceGroupManager::loadResourceGroup()
	* ResourceGroupManager::destroyResourceGroup()
* 旋转: roll-Z轴, pitch-X轴, yaw-Y轴
* SceneNode::detachAllObjects() 卸载所有挂接对象
* SceneManager::getEntity() 根据名称得到实体指针
* SceneNode::getAttachedObject() 得到其挂接的对象
* SceneNode::getAttachedObjectIterator() 得到其挂接对象容器的迭代
* SceneManager::createBillboardSet() 创建公告集
* BIllboardSet::setMaterialName, createBillboard 设置材质, 创建公告
* Billboard::setColour() 设置颜色
* SceneManager::createLight() 创建光源, Light::setPosition, setDiffuseColour, setSpecularColour

* 材质脚本
	* 公告板的材质 Examples/Flare
		* 无光照, 场景混合为添加模式, 禁止深度写入, 散色光为vertexcolour(顶点颜色), 纹理单元为 flare.png
	* Examples/BumpMapping/MultiLight
		- 第一个通道 ambient
			- 该通道用于提供信息给 light 通道
			- 关联顶点着色程序定义 Ogre/BasicVertexPrograms/AmbientOneTexture
			- 定义了两个自动参数 worldViewProj, ambient
			- Ogre/BasicVertexPrograms/AmbientOneTexture
				- 关联 Example_Basic.cg
				- Example_Basic.cg
					- 输入 顶点位置, 纹理坐标
					- 输出 视觉坐标, 纹理坐标, 环境颜色(白色)
		- 第二个通道 perlight
			- 设置环境颜色为黑色
			- iteration once_per_light 设置每个光源都进行一次操作
			- scene_blend add
			- Examples/BumpMapVP 顶点着色程序定义
				- 设置参数 lightPosition, worldViewProj
				- Example_BumpMapping.cg
				- 输出视觉空间位置, 纹理坐标, 切线副法线法线构成旋转矩阵转换的光线方向.
			- Examples/BumpMapFP 片段着色程序定义
				- lightDiffuse 第一个光源的散射光颜色
				- Example_BumpMapping.cg
					- 输入 纹理坐标, 转换后的光线方向
					- 根据该光线方向对纹理采样, 而后将采样后的值从范围[0.0, 1.0]转换到[-1.0, 1.0], 最后采样后的值与单元化的光线方向点乘, 而后乘以光的散射颜色
			- Examples/BumpMapVPShadowRcv  纹理阴影接收器程序(texture shadow receiver program)
				- lightPosition, worldViewProj, worldMatrix, texViewProj
				- Example_BumpMapping.cg
				- 输入 position, normal, uv, tangent 输出 oPosition, uvProj, oUV, oTSLightDir
				- oUV 为世界空间的坐标乘以纹理矩阵得到的结果, oTSLightDir 同上
			- Examples/BumpMapFPShadowRcv 附加的纹理阴影接收器程序(Additive texture shadow receiver program)
				- lightDiffuse
				- Example_BumpMapping.cg
				- 输入 uvproj, uv, TSlightDir 输出 颜色
				- 首先转换后的光线方向进行扩展, 对纹理进行采样后扩展颜色值, 根据阴影纹理采样得到其值
				- 阴影 * 散射光颜色 * (扩展颜色和光线的点乘)
			- 纹理单元 normalmap NMBumpsOut.png, 颜色操作为 replace
