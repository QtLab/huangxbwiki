= New features in 3.1 =
* 自定义的光标: glfwCreateCuorsor, glfwCreateStandardCursor 用于创建. glfwSetCursor 和 glfwDestrory 用于设置和销毁
* 接受将文件和目录的路径拖进 GLFW 的窗口, 该回调见 glfwSetDropCallback
* glfwPostEmptyEvent 函数: 从其他线程发送一个空的事件给主线程的事件序列, 导致 glfwWaitEvent 返回
* glfwGetWindowFrameSize --- 可查询窗口窗口客户端区域其帧各边的大小
* 支持禁用全屏窗口的 auto-iconification 功能. 使用 GLFW_AUTO_ICONIFY 窗口提示
* 支持浮动窗口, 也称之为 topmost 或永远在最顶层, 使用 GLFW_FLOATING 窗口提示
* 可以防止创建一个窗口化的窗口时获得输入焦点, 使用 GLFW_FOCUSED 窗口提示.

= 开始 =
* 头文件
{{{class="brush: c++"
#include <GLFW/glfw3.h>
}}} 
* 几个要点
	- 不要自己去包含 OpenGL 头文件
	- 不要包含 windows.h 或其他平台特有的头文件, 除非你计划直接使用这些 API
	- 如果你需要包含这些头文件, 请在包含 GLFW 之前包含.
* 从 3.0 版本开始, GLU 头文件 glu.h 不再默认包含, 在GLFW头文件之前宏定义GLFW_INCLUDE_GLU可以包含这个文件
{{{class="brush: c++"
#define GLFW_INCLUDE_GLU
#include <GLFW/glfw3.h>
}}} 
* 初始化和终止 GLFW
	- 如初始化成功, 则返回 GL_TRUE, 否则 GL_FALSE
{{{class="brush: c++"
if(!glfwInit())
	exit(EXIT_FAILURE);
}}} 
	- 退出应用程序之前终止 GLFW
{{{class="brush: c++"
glfwTerminate();
}}} 
*设置一个错误回调
{{{class="brush: c++"
void error_callback(int error, const char* description)
{
	fputs(description, stderr);
}
}}}
	- 设置错误回调函数是少数可以在初始化之前设置的函数: glfwSetErrorCallback(err_callback);
* 创建窗口和其上下文.
{{{class="brush: c++"
GLFWwindow* window = glfwCreateWindow(640, 480, "My Title", NULL, NULL);
if(!window)
{
	glfwTerminate();
	exit(EXIT_FAILURE);
}
// ...
glfwDestroyWindow(window);
}}} 
* 在你使用 OpenGL API 之前, 你必须有当前的 OpenGL context: glfwMakeConextCurrent(window);
	- 这个函数会保持上下文的current, 除非你做了另外一个 context current, 或者窗口拥有的current context 被销毁.
* 检查窗口的关闭标志
{{{class="brush: c++"
while(!glfwWindowShouldClose(window))
{
	// Keep runnung
}
}}} 
	- glfwSetWindowCloseCallback --- 设置窗口关闭的回调函数, 当窗口关闭标志设置后立即调用该函数
	- glfwSetWindowShoudClose --- 用于将某种输入解释为关闭窗口, 如 Escape 键
* 接受输入事件
{{{class="brush: c++"
static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
	if(key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
		glfwSetWindowShouldClose(window, GL_TRUE);
}

glfwSetKeyCallback(window, key_calback);
}}} 
* 渲染OpenGL
	- 需要返回用于 glViewport 的 framebuffer 的大小
{{{class="brush: c++"
int width, height;
glfwGetFramebufferSize(window, &width, &height);
glViewport(0, 0, width, height);
}}} 
	- 你可以设置一个 framebuffer 的大小变化回调函数 --- glfwSetFramebufferSizeCallback
* 读取计时器
{{{class="brush: c++"
double time = glfwGetTime();
}}} 
* 交换缓存
{{{class="brush: c++"
glfwSwapBuffers(window);
}}} 
* 设置交换缓存的间隔
{{{class="brush: c++"
glfwSwapInterval(1);
}}} 
* 处理事件
	- 有两种方法处理 pending 事件: polling 和 waiting
	- glfwPollEvents() 处理已经接收的时间并立即返回
	- 如果你想要等到接收到新的输入再更新渲染可以使用 glfwWaitingEvents. 其等到接收到至少一个或以上的事件时, 将线程沉睡, 同时处理所有接收到的事件, 适用于编辑工具.
