= 介绍 =
* 包含 <glm/glm.hpp>
* 如果包含 <boost/static_assert.hpp>, 则GLM代码提供编译期错误, 除非GLM在static_assert情况下由C++ 11编译器构建.
== GLM 扩展 ==
* GLM使用扩展扩充核心的GLSL功能. 包括四元数, 变换, 样条, 矩阵求逆, 颜色空间.
* 要使用这些扩展, 只需要包含其专用的头文件即可. 例如: glm/gtc/matrix_transform.hpp
== 和OpenGL一起工作 ==
* 可用 glVertex3fv(glm::vec3(0)), 但可能会产生非预期的行为.
* 使用头文件 glm/gtc/type_ptr.hpp, 使用 glm::value_ptr(v)可以获取参数的数据指针.
* 另一种方式则是直接使用取址操作符
{{{class="brush: c++"
glm::vec4 v(0.0f);
glm::mat4 m(1.0f);
//...
glVertex3fv(&v[0]);
glLoadMatrixfv(&m[0][0]);
}}} 

= 高级用法 =
== 通知系统 ==
* 默认禁止, 如果要使用通知系统, 定义 GLM_MESSAGES
== 更快的程序编译 ==
* <glm/fwd.hpp> 提供了 GLM 类型的前向声明.
== 精度前缀 ==
* 精度前缀: lowp_, mediump_, highp_. 例如 vec4 有 lowp_vec4, mediump_vec4, highp_vec4.
* 默认所有类型使用high精度.
== 默认精度 ==
* C++ 中, 不可能使用 GLSL 语法实现 GLSL 默认精度.
{{{class="brush: c++"
precision mediump int;
precision highp float;
}}} 
* 为了使用默认精度功能, GLM需要在任意 glm.hpp 之前提供一些定义.
{{{class="brush: c++"
#define GLM_PRECISION_MEDIUMP_INT;
#define GLM_PRECISION_HIGHP_FLOAT;
#include <glm/glm.hpp>
}}} 
== 强制使用弧度 ==
* 声明 GLM_FORCE_RADIANS 切换所有 GLM 函数使用弧度.
== C++ 语言检测 ==
* 避免编译器的语言扩展
{{{class="brush: c++"
#define GLM_FORCE_CXX98
#include <glm/glm.hpp>

//c++11
#define GLM_FORCE_CXX11
#include <glm/glm.hpp>
}}} 
== CUDA 支持 ==
* 定义 GLM_FORCE_CUDA
== SIMD 支持 ==
* GLM 提供了一些 SIMD 优化. 主要通过扩展优化, GLM_GTX_simd_vec4 和 GLM_GTX_simd_mat4
* 限制或强制指令集用于这些优化: GLM_FORCE_SSE2 或 GLM_FORCE_AVX.
* 可以忽略任何内在的优化: GLM_FORCE_PURE
== 强制内联 ==
* 迫使编译器内联 GLM 代码: GLM_FORCE_INLINE.

= SWizzle操作符 =
* 这种操作符允许选择一个向量的多个成分, 以及改变其顺序. 例如: variable.x, variable.xzy, variable.zxyy. 这种操作符可以是左值和右值. 可以使用"xyzw", "rgba", "stpq" 访问.
* 默认 GLM 禁止该功能, 要打开该功能定义: GLM_SWIZZLE
== 默认 C++98 的实现 ==
* C++98的实现显示R值的swizzle操作符, 其作为vector类型的成员函数.
{{{class="brush: c++"
#define GLM_SWIZZLE
#include <glm/glm.hpp>

void foo()
{
	glm::vec4 ColorRGBA(1.0f, 0.5f, 0.0f, 1.0f);
	glm::vec3 ColorBGR = ColorRGBA.bgr();

	glm::vec4 PositionA(1.0, 0.5, 0.0, 1.0);
	glm::vec3 PositionB = PositionA.xyz() * 2.0f;

	glm::vec2 TexCoordST(1.0f, 0.5f);
	glm::vec4 TexCoordSTPQ = TexCoordST.stst();
}
}}}
* 不能作为左值.
== 匿名union成员实现 ==
* Visual C++ 支持union中的匿名结构.
{{{class="brush: c++"
#define GLM_SWIZZLE
#include <glm/glm.hpp>

void foo()
{
	glm::vec4 ColorRGBA(1.0f, 0.5f, 0.0f, 1.0f);
	glm::vec4 ColorBGRA = ColorRGBA.bgra;

	ColorRGBA.bgra = ColorRGBA;

	ColorRGBA.bgra = ColorRGBA.rgba;
}
}}} 
* 匿名 union 成员的swizzle操作符不返回vector类型. 但其可以被其他 swizzle 操作符或者vector构造函数认识.
{{{class="brush: c++"
#define GLM_SWIZZLE
#include <glm/glm.hpp>
#include <iostream>

void foo()
{
	glm::vec4 Color(1.0f, 0.5f, 0.0f, 1.0f); 

	// glm::vec4 ClampedA = glm::clamp(Color.rgba, 0.f, 1.f); // ERROR  
	
	// With by using a constructor 
	glm::vec4 ClampedB = glm::clamp(glm::vec4(Color.rgba), 0.f, 1.f); // OK 

	// Or by using the () operator 
	glm::vec4 ClampedC = glm::clamp(Color.rgba(), 0.f, 1.f); // OK 
}
}}} 

= 替换不赞同的函数 =
* 下面列出可以替换的函数
== OpenGL函数 ==
* glRotate{f, d}
	- glm::mat4 glm::rotate(glm::mat4 const& m, float angle, glm::vec3 const& axis);
	- glm::dmat4 glm::rotate(glm::dmat4 const& m, double angle, glm::dvec3 const& axis);
* glScale{f, d}
	- glm::mat4 glm::scale(glm::mat4 const& m, glm::vec3 const& factors);
	- glm::dmat4 glm::scale(glm::dmat4 const& m, glm::dvec3 const& factors);
* glTranslate{f, d}
	- glm::mat4 glm::translaate(glm::mat4 const& m, glm::vec3 const& translation);
	- glm::dmat4 glm::translaate(glm::dmat4 const& m, glm::dvec3 const& translation);
* glLoadIdentity
	- glm::mat4(1.0) 或 glm::mat4();
	- glm::dmat4(1.0) 或 glm::dmat4();
* glMultMatrix{f, d}
	- glm::mat4() * glm::mat4();
	- glm::dmat4() * glm::dmat4();
* glLoadTransposeMatrix{f, d}
	- glm::transpose(glm::mat4());
	- glm::transpose(glm::dmat4());
* glMultTransposeMatrix{f, d}
	- glm::mat4() * glm::transpose(glm::mat4());
	- glm::dmat4() * glm::transpose(glm::dmat4());
* glFrustum
	- glm::mat4 glm::frustum(float left, float right, float bottom, float top, float zNear, float zFar);
	- glm::dmat4 glm::frustum(double left, double right, double bottom, double top, double zNear, double zFar);
* glOrtho
	- glm::mat4 glm::ortho(float left, float right, float bottom, float top, float zNear, float zFar);
	- glm::dmat4 glm::ortho(double left, double right, double bottom, double top, double zNear, double zFar);
== GLU函数 ==
* gluLookAt
	- glm::mat4 glm::lookAt(glm::vec3 const& eye, glm::vec3 const& center, glm::vec3 const& up);
	- glm::dmat4 glm::lookAt(glm::dvec3 const& eye, glm::dvec3 const& center, glm::dvec3 const& up);
* gluOrtho2D
	- glm::mat4 glm::ortho(float left, float right, float bottom, float top);
	- glm::dmat4 glm::ortho(double left, double right, double bottom, double top);
* gluPerspective
	- glm::mat4 perspective(float fovy, float aspect, float zNear, float zFar);
	- glm::dmat4 perspective(double fovy, double aspect, double zNear, double zFar);
* gluPickMatrix
	- glm::mat4 pickMatrix(glm::vec2 const& center, glm::vec2 const& delta, glm::ivec4 const& viewport);
	- glm::dmat4 pickMatrix(glm::dvec2 const& center, glm::dvec2 const& delta, glm::ivec4 const& viewport);
* gluProject
	- glm::vec3 project(glm::vec3 const& obj, glm::mat4 const& model, glm::mat4 const& proj, glm::{i, ' '}vec4& viewport);
	- glm::dvec3 project(glm::dvec3 const& obj, glm::dmat4 const& model, glm::dmat4 const& proj, glm::{i, ' ', d}vec4& viewport);
* gluUnProject
	- glm::vec3 unProject(glm::vec3 const& win, glm::mat4 const& model, glm::mat4 const& proj, glm::{i, ' '}vec4 const& viewport);
	- glm::dvec3 unProject(glm::dvec3 const& win, glm::dmat4 const& model, glm::dmat4 const& proj, glm::{i, ' ', d}vec4 const& viewport);

= 扩展 =
== GLM_GTC_constants ==
* 内置常量列表
== GLM_GTC_epsilon ==
* selectable epsilon的近似相等和不等比较.
== GLM_GTC_matrix_access ==
* 定义了访问矩阵行或列的函数
== GLM_GTC_matrix_integer ==
* 提供了整数矩阵类型, 该类型不支持逆矩阵和行列式函数.
== GLM_GTC_matrix_inverse ==
* 定义了矩阵求逆函数
== GLM_GTC_matrix_transform ==
* 定义了生成常用变换矩阵的函数.
== GLM_GTC_noise ==
* 定义了2D, 3D, 4D的procedural noise 函数
== GLM_GTC_packing ==
* 转换标量和向量类型为packed格式. 同样还可以unpacked打包的数据为原始类型.
== GLM_GTC_quaternion ==
* 定义了四元素类型和相关操作.
== GLM_GTC_random ==
* 使用不同分布方法生成随机数.
== GLM_GTC_reciprocal ==
* 提供了双曲函数: 正切, 余割, 余切等.
== GLM_GTC_swizzle ==
* 模拟GLSL的swizzle操作符.
== GLM_GTC_type_precision ==
* 向量和矩阵类型有相应的精度.
== GLM_GTC_type_ptr ==
* 处理指针和向量, 矩阵类型之间的相互作用.
* 其定义了一个重载函数 glm::value_ptr
* 对于上传值缓存对象或者从缓存对象中拷贝来说, 很有用.
{{{class="brush: c++"
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>

glm::vec3 aVector(3);
glm::mat4 someMatrix(1.0);

glUniform3fv(uniformLoc, 1, glm::value_ptr(aVector));
glUniformMatrix4fv(uniformMatrixLoc, 1, GL_FALSE, glm::value_ptr(someMatrix));
}}} 
== GLM_GTC_ulp ==
* 允许对一个关联实现测量一个函数的精度.

= 已知问题 =
== not function ==
* C++中不是关键词. 使用 not_ 实现.
== Swizzle操作符限制 ==
== 精度前缀支持 ==

= 代码例子 =
* 计算三角形法线
{{{class="brush: c++"
#include <glm/glm.hpp> // vec3 normalize cross 
 
glm::vec3 computeNormal(glm::vec3 const & a, glm::vec3 const & b, glm::vec3 const & c)
{
	return glm::normalize(glm::cross(c - a, b - a)); 
}
 
// A much faster but less accurate alternative: 
#include <glm/glm.hpp> // vec3 cross 
#include <glm/gtx/fast_square_root.hpp> // fastNormalize 
glm::vec3 computeNormal(glm::vec3 const & a, glm::vec3 const & b, glm::vec3 const & c )
{
	return glm::fastNormalize(glm::cross(c - a, b - a)); 
}
}}}
* 矩阵变换
{{{class="brush: c++"
// vec3, vec4, ivec4, mat4 
#include <glm/glm.hpp> 
// translate, rotate, scale, perspective  
#include <glm/gtc/matrix_transform.hpp> 
// value_ptr 
#include <glm/gtc/type_ptr.hpp> 
 
void setUniformMVP(GLuint Location, glm::vec3 const & Translate, glm::vec3 const & Rotate)
{
	glm::mat4 Projection = glm::perspective(45.0f, 4.0f / 3.0f, 0.1f, 100.f); 
	glm::mat4 ViewTranslate = glm::translate(glm::mat4(1.0f), Translate); 
	glm::mat4 ViewRotateX = glm::rotate(ViewTranslate,Rotate.y, glm::vec3(-1.0f, 0.0f, 0.0f)); 
	glm::mat4 View = glm::rotate(ViewRotateX,Rotate.x, glm::vec3(0.0f, 1.0f, 0.0f)); 
	glm::mat4 Model = glm::scale(glm::mat4(1.0f),glm::vec3(0.5f));
	glm::mat4 MVP = Projection * View * Model;
	glUniformMatrix4fv(Location, 1, GL_FALSE, glm::value_ptr(MVP));
}
}}} 
* 向量类型
{{{class="brush: c++"
#include <glm/glm.hpp> //vec2 
#include <glm/gtc/type_precision.hpp> //hvec2, i8vec2, i32vec2 
 
std::size_t const VertexCount = 4; 
 
// Float quad geometry 
std::size_t const PositionSizeF32 = VertexCount * sizeof(glm::vec2); 
glm::vec2 const PositionDataF32[VertexCount] = 
{ 
glm::vec2(-1.0f,-1.0f), 
glm::vec2( 1.0f,-1.0f), 
glm::vec2( 1.0f, 1.0f), 
glm::vec2(-1.0f, 1.0f) 
}; 
// Half-float quad geometry 
std::size_t const PositionSizeF16 = VertexCount * sizeof(glm::hvec2); 
glm::hvec2 const PositionDataF16[VertexCount] = 
{ 
glm::hvec2(-1.0f, -1.0f), 
glm::hvec2( 1.0f, -1.0f), 
glm::hvec2( 1.0f, 1.0f), 
glm::hvec2(-1.0f, 1.0f) 
}; 
// 8 bits signed integer quad geometry 
std::size_t const PositionSizeI8 = VertexCount * sizeof(glm::i8vec2); 
glm::i8vec2 const PositionDataI8[VertexCount] = 
{ 
glm::i8vec2(-1,-1), 
glm::i8vec2( 1,-1), 
glm::i8vec2( 1, 1), 
glm::i8vec2(-1, 1) 
}; 
// 32 bits signed integer quad geometry 
std::size_t const PositionSizeI32 = VertexCount * sizeof(glm::i32vec2); 
glm::i32vec2 const PositionDataI32[VertexCount] = 
{ 
glm::i32vec2(-1,-1), 
glm::i32vec2( 1,-1), 
glm::i32vec2( 1, 1), 
glm::i32vec2(-1, 1) 
}; 
}}} 
== 光照 ==
{{{class="brush: c++"
#include <glm/glm.hpp> // vec3 normalize reflect dot pow 
#include <glm/gtx/random.hpp> // vecRand3 
 
// vecRand3, generate a random and equiprobable normalized vec3 
glm::vec3 lighting(intersection const & Intersection, material const & Material, light const & Light, glm::vec3 const & View)
{
	glm::vec3 Color = glm::vec3(0.0f); 
	glm::vec3 LightVertor = glm::normalize(Light.position() - Intersection.globalPosition() + glm::vecRand3(0.0f, Light.inaccuracy()); 
	if(!shadow(Intersection.globalPosition(), Light.position(), LightVertor)) 
	{
		float Diffuse = glm::dot(Intersection.normal(), LightVector); 
		if(Diffuse <= 0.0f) 
			return Color; 
		if(Material.isDiffuse()) 
			Color += Light.color() * Material.diffuse() * Diffuse; 
		if(Material.isSpecular()) 
		{
			glm::vec3 Reflect = glm::reflect(-LightVector, Intersection.normal()); 
			float Dot = glm::dot(Reflect, View); 
			float Base = Dot > 0.0f ? Dot : 0.0f; 
			float Specular = glm::pow(Base, Material.exponent()); 
			Color += Material.specular() * Specular; 
		}
	}
	return Color;  
}
}}}
