* 函数
	- glGenQueries/glDeleteQueries
	- glBeginQuery/glEndQuery
	- glGetQueryObjectiv

= Bounding Boxes =
* 围绕体的复杂度越低, 则优化的结果可能越好.
* 当我们绘制我们的围绕体时, 我们将允许 occlusion query, 其将统计通过深度测试的片段数量. 因此, 我们不必将围绕体绘制至屏幕. 所以我们在渲染围绕体之前关闭写入深度和颜色缓存等功能.
{{{c++
	glShadeModel(GL_FLAT);
	// Texturing is already disabled
	...
	glDisable(GL_LIGHTING);
	glDisable(GL_COLOR_MATERIAL);
	glDisable(GL_NORMALIZE);
	glDepthMask(GL_FALSE);
	glColorMask(0, 0, 0, 0);
}}} 
* 而后给 occludee 命名. 使用 GLuint 数组保存.
{{{c++
	// Generate occlusion query names
	glGenQueries(27, queryIDs);	
}}} 
* 删除
{{{c++
	glDeleteQueries(27, queryIDs);
}}} 
* glBeginQuery开始查询, query object是一个内部计数器, 统计可以写入帧缓存的片段数量. 开始该查询则计数器重置为0.
* 当我们完成绘制围绕体之后, 则用 glEndQuery 结束查询.
== Querying the Query Object ==
* glGetQueryObjectiv 查看该pass计数器是否为0.
* 还可以查询结果是否立即可用. 围绕盒的渲染可能还在管线中其结果还没有准备好. 你可以查询 GL_QUERY_RESULT_AVAILABLE 查看结果是否准备好. 可以在其准备好之前在应用程序中处理其他的工作.
* 查询实现的pass counter的位数量可以为0, 表示该occlusion queries无用且不会被用. 所以在程序初始化时检查这种情况.
* glIsQuery --- 检查某个名字是否是一个已有查询对象的名字.

== 最佳实践 ==
* 首先绘制occluder, occludee, 从前向后排序.
* 本帧的occlude结果用于下一帧, 以避免等待. 结果接近于0的物体也可以不去渲染.
