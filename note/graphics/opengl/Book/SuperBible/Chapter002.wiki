= 创建一个简单的应用 =
* void glClearBufferfv(GLenum buffer, GLint drawBuffer, const GLfloat* value)
	- 清空某个缓存

= 使用着色器 =
* 着色器有 vertex shader, tessellation control shader, tesselllation evaluation shader, geometry shader, fragment shader, compute shader.
* 着色器版本: #version 430 core
* 顶点着色器 gl_Position 输出位置.
* 片段着色器, 设置out vec4变量输出颜色.
* vertex array object(VAO), 维护OpenGL管线其输入的所有相关状态.
	- 创建VAO, glGenVertexArrays()
	- 绑定, glBindVertexArray()
* 绘制命令, glDrawArrays()
* 设置点大小, glPointSize()

= 绘制我们第一个三角形 =
* 顶点着色器的特殊输入 gl_VertexID, 表示要处理顶点的索引. 其使用 glDrawArrays() 的起始位置和计数. 着色器例子:
{{{class="brush: glsl"
#version 430 core
void main(void)
{
	// Declare a hard-coded array of positions
	const vec4 vertices[3] = vec4[3](vec4( 0.25, -0.25, 0.5, 1.0),
									vec4(-0.25, -0.25, 0.5, 1.0),
									vec4( 0.25, 0.25, 0.5, 1.0));
	// Index into our array using gl_VertexID
	gl_Position = vertices[gl_VertexID];
}
}}} 

