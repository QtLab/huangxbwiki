==== 01_Block ====
* gltLoadTGA 演示了如何加载一个TGA图像文
* m3dGetPlaneEquation, m3dMakePlanarShadowMatrix, glMultMatrixf 这三个公式计算出用于阴影的矩阵, 注意其中, 平面和光源方向都位于当前的坐标系下.
==== 02_bounce ====
* 使用 glutTimerFunc 实现动画, 而非使用 glutIdleFunc
==== 02_glrect ====
* glRectf 绘制矩形
==== 03_lines ====
* glutSpecialFunc 设置特殊键的事件.
==== 03_linesw ====
* glLineWidth 设置宽度, GL_LINE_WIDTH_RANGE 线宽范围.
==== 03_lstipple ====
* 实现线的点画. glLineStipple 与 GL_LINE_STIPPLE
==== 03_lstrips ====
* 实现线的连线, GL_LINE_STRIP
==== 03_points ====
* 绘制点, GL_POINTS
==== 03_pointz ====
* GL_POINT_SIZE_GRANULARITY --- 点大小的粒度, 可以以这个粒度变化点的大小, 本例的粒度为 0.125
==== 03_pstipple ====
* GL_POLYGON_STIPPLE --- 多边形点画
* glBegin(GL_POLYGON) --- 多边形绘制
==== 03_scissor ====
* GL_SCISSOR_TEST --- 允许剪裁测试
* glScissor --- 四个参数表示窗口的大小, 以像素为单位, 左下角坐标和高宽.
==== 03_single ====
* 可以绘制的时候不清空颜色缓存, 以旧的缓存为背景进行绘制.
==== 03_star ====
* 菜单的使用和设置边.
* glutCreateMenu 创建一个菜单, 参数为菜单处理函数
* glutAddMenuEntry 在上面函数创建的菜单下创建子菜单, 参数为整数或为菜单.
* glutAttachMenu 挂接菜单至右键
* glEdgeFlag 指示一个顶点其是否一个边的起点. 绘制多边形就不绘制以该顶点为起点的边, 其余的边如旧.
==== 03_stencil ====
* 显示了GL_STENCIL_TEST, glStencilOp 和 glStencilFunc 的使用.
==== 03_triangle ====
* GL_TRIANGLE_FAN 的使用.
==== 04_atom ====
* 演示多个星球围绕太阳旋转的例子.
* 正交投影
==== 04_atom2 ====
* 透视投影
==== 04_ortho ====
* 正交投影与光照
==== 04_perspct ====
* 透视投影
==== 04_solar ====
* 演示天体(太阳, 地球, 月亮)
==== 04_SphereWorld ====
* gltools.h 有一些工具函数
* math3d.h 有许多3D数学操作
* glFrame.h 可以用于设置相机和绘制物体. 个人认为这个类绘制物体默认会绕Y轴旋转180度.
==== 04_transform ====
* glLoadMatrixf 加载矩阵, 所以使用正确的话, 可以不需要用 glPushMatrix 和 glPopMatrix.
==== 05_ambient ====
* 显示了如何使用顶点数组.
	- 允许 GL_VERTEX_ARRAY系列
	- 使用 glVertexPointer 系列指定数据
	- 使用 glDrawArrays 进行绘制.
* 光照 GL_LIGHT_MODEL_AMBIENT, GL_COLOR_MATERIAL, glColorMaterial
==== 05_jet ====
* 上面代码不带光照的版本
==== 05_litjet ====
* 使用顶点数组和法线数组, 设置了环境光和散射光.
==== 05_shadow ====
* 演示了阴影矩阵如何绘制一个阴影
* 根据光源位置和平面求解出阴影矩阵
* 而后将要投影的物体再重新绘制一遍, 在绘制之前加载上面的矩阵, 并设置阴影颜色
* 注光源, 平面, 要投影的模型都位于同一坐标系中.
==== 05_shinyJet ====
* 光照镜面的绘制.
==== 05_sphereworld ====
* 带阴影的球体世界.
* 将需要投射阴影的模型部分的绘制统一写入一个函数, 在其中颜色部分使用不同的处理.
==== 05_spot ====
* 演示了聚焦光
* 这里表明了光照设置其位置时, 该位置为当年模型坐标系中的位置, 包括聚焦的方向也是当前坐标系的方向.
* 演示了flat着色和smooth着色的区别.
==== 05_triangle ====
* 一个简单三角形的绘制.
==== 06_fogged ====
* 雾的绘制
* 允许 GL_FOG, 设置 GL_FOG_COLOR, GL_FOG_START, GL_FOG_END, GL_FOG_MODE
==== 06_motionblur ====
* 累积缓存实现运动模糊
* GL_LOAD 初步内容. GL_ACCUM 累积内容, GL_RETURN 返回内容.
==== 06_multisample ====
* 首先需要先修改显卡驱动: 这里设置平滑处理-模式为置换任何应用程序设置(默认应用程序控制的). 平滑处理-透明度为多重取样(默认关).
* 允许或禁止 GL_MULTISAMPLE_ARB
==== 06_reflection ====
* 演示了如何在地面反射物体
* 首先绘制物体
* 而后绘制反射物体, 其中先设置反射的光源位置, 而后倒转Y轴, glScalef(1.0, -1.0, 1.0)实现. 最后照常绘制物体.
* 绘制地面, 其中地面颜色的alpha值设置为0.5, 而后开启缓存.
* 无法先绘制地面, 而后混合绘制倒转物体, 因为在绘制倒转物体的时候, 其自身也参与了混合. 应该使用纹理方法来实现.
==== 06_smoother ====
* 演示了点和线的反锯齿
* 反锯齿: 允许混合, 设置混合函数, 允许 POINT_SMOOTH, 允许 LINE_SMOOTH, 允许 POLYGON_SMOOTH, 设置三者的SMOOTH_HINT.
==== 06_sphereworld ====
* 使用模板求解阴影
* 首先禁止深度测试, 禁止光照, 打开模板, 照常绘制阴影. 主要原因就是因为绘制阴影的时候禁止深度写入, 所以当一个地方已经绘制了阴影, 重合时会再次进行渲染. 使用模板测试可以避免阴影有些地方被绘制多次.
==== 07_bitmaps ====
* 位图的绘制
* glRasterPos2f 设置光栅化位置, glBitmap 绘制位图.
==== 07_imageload ====
* 加载图像
* glDrawPixels --- 绘制图像数据.
==== 07_imaging ====
* 图像的处理
* GL_VIEWPORT 可以获取视口信息
* glPixelZoom 像素缩放, 使得图像刚好填充整个窗口
* glLoadMatrixf 可以加载颜色矩阵, 首先使用 glMatrixMode(GL_COLOR) 设置颜色矩阵. 这里的矩阵将颜色转换为亮度值.
* glHistogram 收集 histogram 数据.
* glConvolutionFilter2D 设置卷积
* glColorTable 设置颜色表用于反转图像.
* 颜色矩阵模式下, 还可以用 glScalef 加亮图像.
* 可以允许 GL_COLOR_TABLE, GL_CONVOLUTION_2D, GL_HISTOGRAM
* 最后使用 glDrawPixels 绘制像素
* gltWriteTGA 可以用于截屏
==== 07_Operations ====
* glPixelZoom(-1.0f, -1.0f) 反转图像
* glPixelTransferf(GL_RED_SCALE, 1.0f); 第二个参数可以设置1.0或其他值, 如0.0, 表示该值缩放的比率, 这样可以实现只绘制红色部分或蓝色部分, 绿色部分.
* 可以先使用 glDrawPixels 绘制像素, 而后调用  glPixelTransferf 设置参数, 再使用 glReadPixels 读取, 就可以得到一个图像的亮度图.
* glPixelTransferi(GL_MAP_COLOR, GL_TRUE); 设置颜色映射. glPixelMapfv(GL_PIXEL_MAP_R_TO_R, 256, invertMap) 之类函数设置映射参数, 这样就可以实现颜色反转.
==== 08_pyramid ====
* 主要实现如何加载图像和实现纹理.
==== 08_sphereworld ====
* 给球体世界加上纹理
* 绘制阴影时, 阴影部分颜色带有alpha值可用于混合, 因此加上模板测试避免阴影重合的地方更黑.
==== 08_toon ====
* 使用一维纹理实现卡通绘制
* 一维纹理大小为4个大小, 分别表示不同亮度的值
* 使用光的方向点乘法线得到纹理坐标.
* 这里使用模型视图矩阵的逆矩阵乘以光的方向得到模型坐标系中的光的方向. 再用这个方向点乘法线得到纹理坐标.
==== 08_tunnel ====
* 演示纹理最小化过滤不同模式的效果, 通过修改纹理参数 GL_TEXTURE_MIN_FILTER 实现.
==== 09_anisotropic ====
* 纹理的各项异性参数
* 首先得到 GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 的值, 而后设置纹理参数 GL_TEXTURE_MAX_ANISOTROPY_EXT, 该参数设置为1.0则表示关闭纹理最大各向异性.
