= 自定义类 =
	* Helper
		* 该类的作用就是通过 paint 方法完成绘制操作
		* 唯一不同的就是 painter 参数的变化, 该 painter 可以是 QWidget, 也可以是 QGLWidget 的派生类

= 重要类与函数 =
	* QPainter --- 在Widget执行底层的绘制操作, 以及其他的绘制设备
		* QPainter()
		* Begin(QPaintDevice*)
			* 在该函数调用之后, 所有的painter设置(setPainter, setBrush)都重置为缺省值
			* 可用QPaintDevice*为参数调用构造函数来避免使用该方法, 这样析构时就自动调用 End() 方法
			* QPaintDevice 为所有可绘制对象的基类
		* translate --- 移动坐标系统
		* rotate --- 根据角度顺时针旋转坐标系统
		* setRenderHint --- 设置一些渲染参数, 如 QPainter::Antialiasing
		* save(), restore() 函数可以保存和恢复设置, setBrush, setPen, setFont 可设置其他内容
		* drawEllipse 绘制椭圆
	* QObject
		* sender --- 用于在slot函数中调用, 得到发送该信号的对象
	* QWidget
		* setAutoFillBackground --- 可以禁止自动重绘背景
		* repaint
			* 通过立即调用 paintEvent() 函数重回该 Widget, 除非禁止更新或者该Widget被隐藏
			* 在绘制动画时, 最好能替代 update() 函数. 注意在一个被 paintEvent() 函数调用的函数里调用 repaint 容易引起无限循环, update则没有这个问题
	* QGLWidget --- 该类继承自 QWidget, 所以 repaint, paintEvent 函数一样可以作用
		* QPainter 以该类为参数进行绘制, 和QWidget* 为参数的函数调用并无区别. 个人猜想其内部实现可能有所变化
